#!/usr/bin/env perl

use strict;
use warnings;

# Modules from CPAN
use Math::Subsets::List;

# Core modules
use Digest::SHA qw(sha256_hex);
use File::Compare;
use File::Copy;


#### GLOBALS ###########################################################

mkdir 'test';
open my $testsMF, '>>', 'test/tests-manifest.txt'
        or die "Cannot append to test manifest: $!\n";
my $currdsk = 'bin/os8v3d-bin.rk05';
my $currdlz = 'bin/os8v3d-bin.rklz';
my $currlog = 'obj/mkos8-bin.log';


#### sanitize_log ######################################################
# Copy the given input log file to the ouptut file, expurgating bits
# that change from one run to the next without being meaningful.

sub sanitize_log
{
    my ($ifile, $ofile) = @_;

    open my $if, '<', $ifile or die "Cannot read $ifile: $!\n";
    open my $of, '>', $ofile or die "Cannot write $ofile: $!\n";

    while (<$if>) {
        # Don't care about the simulator's configuration line: as
        # far as we know, it doesn't affect the OS/8 disks.
        s{^PiDP-8/I .*}{PiDP-8/I [test-mkos8]};

        # These tend to happen during OS/8's keyboard busy-wait
        # loop, which means there's a 50/50 chance of which
        # instruction will happen to be running at the time of the
        # interrupt.  Doesn't matter which.
        s{Simulation stopped, .*}{Simulation stopped.};

        # Squish configuration line in the INIT.TX output.
        s{CONFIGURED BY .*}{CONFIGURED BY tester\@mkos8};

        print $of $_;
    }

    close $if;
    close $of;
}


#### test ##############################################################
# Test a single permutation

sub test
{
    my @opts = @_;

    # Distill this option set to a hash value after which we will
    # name the output files.  We don't want to name files with a
    # leading hyphen or with long variable-length names, potentially
    # multiple lines long.
    my $optstr = join ' ', @opts;
    my $hash = sha256_hex($optstr);
    my $hdir = "test/$hash";
    my $testlog = "$hdir/last.log";
    my $testdlz = "$hdir/last.rklz";
    mkdir $hdir;

    # Do the test
    my $optdesc = $optstr || "default media";
    print "Configuring $optdesc...\n";
    system "./configure $optstr > test/cfg.log 2>&1"
            and die "Failed to configure $optdesc!\n";
    print "Building...\n";
    system "make $currdsk > test/make.log 2>&1"
            and die "Failed to build $currdsk!\n";

    # Quickly compress the test disk: we don't want to store all the
    # "air" in an RK05 in our test corpus.
    system("lzma < $currdsk > $currdlz");

    if (not -f $testlog or not -f $testdlz) {
        # This test hasn't run here yet, so blindly assume its
        # output is correct, and thus that it should be our exemplar
        # henceforth.  Store in LZ format 
        copy ($currdlz, $testdlz);

        sanitize_log ($currlog, $testlog);

        # Log the mapping between the hash and the options it
        # represents, so the user can reverse it.
        print $testsMF "$hash  $optdesc\n";
    }
    elsif (compare ($currdlz, $testdlz) == 0) {
        print "mkos8 $optdesc test passed.\n";
    }
    else {
        my $fdiff = "$hdir/fail.diff";
        my $faillog = "$hdir/fail.log";
        sanitize_log ($currlog, $faillog);
        system "diff -wu $testlog $faillog > $fdiff";
        print "MKOS8 ", uc($optdesc), " DIFFERS!  See $fdiff.\n";
    }
}


#### main ##############################################################

# Get all current --*-os8-* options, filtering out those we know should
# not be tried for this:
#
# *   No --os8-minimal because that just turns on all --disable-os8-* 
#     options, so it's already covered.
# *   No --disable-os8-src because we don't test the src disk; it's
#     always generated the same way.
# *   No --disable-os8-focal because it disables the other two FOCAL
#     options, which we're already going to test singly and together.
my @cmd = (
    "./configure --help",
    "grep -- -os8-",
    "sed -Ee 's/^ +//'",
    "cut -f1 -d' '",
    "grep -v -e 'os8-minimal' -e 'os8-src' -e 'os8-focal\$'"
);
open my $opts, '-|', join('|', @cmd) or die "Failed to get os8 option set: $!\n";
my @opts = <$opts>;
close $opts;
chomp @opts;

# Test all possible permutations of those options.
subsets \&test, @opts;
