#!/usr/bin/env perl
########################################################################
# test-mkos8 - Collects the set of all --*-os8-* options from the
#   configure script, generates all unique subsets of that option set,
#   runs configure with each of those subsets, and compares the output
#   OS/8 bin RK05 disk to the previous run's version.  If there is a
#   discrepancy, generate a diff against the build log for that option
#   set and report the problem for the user to diagnose.
#
#   The first time the script is run, or the first time a new unique
#   option subset is generated, we save the build results as the
#   exemplar to use in later tests.
#
# Copyright Â© 2017 by Warren Young
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS LISTED ABOVE BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
# OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the names of the authors above
# shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written
# authorization from those authors.
########################################################################

use strict;
use warnings;

# Modules from CPAN
use Math::Subsets::List;
use Parallel::Loops;

# Core modules
use Cwd qw(abs_path);
use Digest::SHA qw(sha256_hex);
use English;
use File::Basename;
use File::Compare;
use File::Copy;
use Getopt::Std;

# Perl::Critic rules we're willing to bend
## no critic (InputOutput::RequireBriefOpen )


#### GLOBALS ###########################################################

my @tests;
my $tests_mf;
my $currdsk = 'bin/os8v3d-bin.rk05';
my $currdlz = 'bin/os8v3d-bin.rklz';
my $currlog = 'obj/mkos8-bin.log';

# Command line option values
my ($dry_run, $generate_only, $single_core);


#### sanitize_log ######################################################
# Copy the given input log file to the ouptut file, expurgating bits
# that change from one run to the next without being meaningful.

sub sanitize_log
{
    my ($ifile, $ofile) = @_;

    open my $if, '<', $ifile or die "Cannot read $ifile: $!\n";
    open my $of, '>', $ofile or die "Cannot write $ofile: $!\n";

    while (<$if>) {
        # Don't care about the simulator's configuration line: as
        # far as we know, it doesn't affect the OS/8 disks.
        s{^PiDP-8/I .*}{PiDP-8/I [test-mkos8]}x;

        # These tend to happen during OS/8's keyboard busy-wait
        # loop, which means there's a 50/50 chance of which
        # instruction will happen to be running at the time of the
        # interrupt.  Doesn't matter which.
        s{Simulation stopped, .*}{Simulation stopped.}x;

        # Squish configuration line in the INIT.TX output.
        s{CONFIGURED BY .*}{CONFIGURED BY tester\@mkos8}x;

        print $of $_;
    }

    close $if;
    close $of;

    return;
}


#### build_test ########################################################
# Build test for a single permutation

sub build_test
{
    my @opts = @_;

    # Distill this option set to a hash value after which we will
    # name the output files.  We don't want to name files with a
    # leading hyphen or with long variable-length names, potentially
    # multiple lines long.
    my $optstr = join ' ', @opts;
    my $hash = sha256_hex($optstr);
    my $hdir = "test/$hash";  # test hash dir relative to our CWD
    my $rhdir = "../$hash";   # $hdir relative to builddir test/tmp/$PID
    my $test = { 
        hash   => $hash,
        hdir   => $rhdir,
        log    => "$rhdir/last.log",
        name   => ($optstr || 'default media'),
        optstr => $optstr,
        rklz   => "$rhdir/last.rklz",
    };

    # Skip this one if it already exists and we're in -g mode.
    if ($generate_only && -d $hdir &&
            -f "$hdir/last.log" && 
            -f "$hdir/last.rklz") {
        print "Skipping $hash; already done.\n";
    }
    else {
        push @tests, $test;
    }

    return;
}


#### do_test ###########################################################
# Test a single permutation

sub do_test
{
    # Set up working and output directories
    my $test = $_;
    print "Configuring $test->{name}, PID $PID...\n";
    return if $dry_run;
    mkdir $test->{hdir};
    my $tdir = $test->{hdir} . "../tmp/$PID";
    mkdir $tdir;
    chdir $tdir;

    # Build the test disk image
    system "../../configure $test->{optstr} > cfg.log 2>&1"
            and die "Failed to configure $test->{name}!\n";
    print "Building...\n";
    system "make $currdsk > make.log 2>&1"
            and die "Failed to build $currdsk!\n";

    # Quickly compress the test disk: we don't want to store all the
    # "air" in an RK05 in our test corpus.
    system("lz4 $currdsk > $currdlz");

    if (not -f $test->{log} or not -f $test->{rklz}) {
        # This test hasn't run here yet, so blindly assume its
        # output is correct, and thus that it should be our exemplar
        # henceforth.  Store in LZ4 format 
        move ($currdlz, $test->{rklz});

        sanitize_log ($currlog, $test->{log});

        # Log the mapping between the hash and the options it
        # represents, so the user can reverse it.
        print $tests_mf "$test->{hash}  $test->{name}\n";
    }
    elsif (compare ($currdlz, $test->{rklz}) == 0) {
        print "mkos8 $test->{name} test passed.\n";
    }
    else {
        my $fdiff = "$test->{hdir}/fail.diff";
        my $faillog = "$test->{hdir}/fail.log";
        sanitize_log ($currlog, $faillog);
        system "diff -wu $test->{log} $faillog > $fdiff";
        print "MKOS8 ", uc($test->{name}), " DIFFERS!  See $fdiff.\n";
    }

    system("cd .. ; rm -r $PID");

    return;
}


#### cleanup ###########################################################
# When the program exits, remove our temporary working directory

sub cleanup
{
    system("rm -rf test/tmp");
}
$SIG{INT} = $SIG{TERM} = sub { cleanup; exit 1 };
$SIG{__DIE__} = \&cleanup;


#### main ##############################################################

# Parse command line
my %clopts;
getopts('gns', \%clopts) or die "Failed to parse command line!\n";
$dry_run = $clopts{n};
$generate_only = $clopts{g};
$single_core = $clopts{s};

# Get all current --*-os8-* options, filtering out those we know should
# not be tried for this:
#
# *   No --os8-minimal because that just turns on all --disable-os8-* 
#     options, so it's already covered.
# *   No --disable-os8-src because we don't test the src disk; it's
#     always generated the same way.
# *   No --disable-os8-focal because it disables the other two FOCAL
#     options, which we're already going to test singly and together.
my @cmd = (
    "./configure --help",
    "grep -- -os8-",
    "sed -Ee 's/^ +//'",
    "cut -f1 -d' '",
    "grep -v -e 'os8-minimal' -e 'os8-src' -e 'os8-focal\$'"
);
open my $ocmd, '-|', join('|', @cmd) or die "Failed to get os8 option set: $!\n";
my @cfgOpts = <$ocmd>;
close $ocmd;
chomp @cfgOpts;

# Init global resources
mkdir 'test';
mkdir 'test/tmp';
open $tests_mf, '>>', 'test/tests-manifest.txt'
        or die "Cannot append to test manifest: $!\n";

# Generate all possible permutations of those options.
subsets \&build_test, @cfgOpts;

# Run the tests
my $tdir = abs_path(dirname($0));
my $cores = $single_core ? 1 : int(`$tdir/corecount`);
my $pl = Parallel::Loops->new($cores);
$pl->foreach ( \@tests, \&do_test);
