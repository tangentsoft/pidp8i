#!/usr/bin/python
# -*- coding: utf-8 -*-
########################################################################
# mkos8 - Build bin/os8v3d-*.rk05 from media/*/*.tu56 by scripting
#    commands to SIMH and OS/8.
#
# Copyright Â© 2017 by Jonathan Trites, William Cattey, and Warren Young.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS LISTED ABOVE BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
# OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the names of the authors above
# shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written
# authorization from those authors.
########################################################################

import argparse
import os
import sys
import subprocess
import pexpect
import time
from shutil import copyfile


#### globals and constants #############################################

child = None

# Flag set when -v is *not* given.  Causes make_*() and the functions
# called thereby to print progress messages to the console since SIMH
# and OS/8 output is not being sent there to clue the user into the
# script's progress.
progmsg = True

# kludgy flag to add more verbose debug output.
debug = False

_media_dir = "@abs_top_srcdir@/media/"
_bin_dir = "@builddir@/bin/"
_bin_rk05 = "os8v3d-bin.rk05"
_src_rk05 = "os8v3d-src.rk05"


#### simh_send #########################################################
# Wait for a SIMH command prompt and then send the given line

def simh_send (send_line):
  global child

  child.expect("sim> $")
  child.sendline(send_line)


#### os8_kbd_delay #####################################################
# Artificially delay the media generation process to account for the
# fact that OS/8 lacks a modern multi-character keyboard input buffer.
# It is unsafe to send text faster than a contemporary terminal could.
#
# The constant is expanded to show that it comes from the 2400 bps of
# the VT05s used by some well-heeled PDP-8 users divided by 7-bit ASCII
# plus necessary start, stop, and parity bits.  The constant is inverted
# to get seconds per character instead of characters per second.  OS/8
# must be at least this fast, being contemporary with the VT05.
#
# You might think to try and speed this up by increasing the 2400 bps
# value below.  For one thing, the 9600 bps VT52 was probably used with
# some later OS/8 systems.  Also, the higher IPS rate of our simulated
# PDP-8 must help here.  However, if you actually time doing so, it
# doesn't help, presumably because other I/O overheads (e.g. the TU56
# reading time) swamp any improvement you can get here.

_kbd_delay = 1 / (2400 / (7 + 1 + 1 + 1))
def os8_kbd_delay():
  time.sleep(_kbd_delay)


#### os8_pmt_send ######################################################
# Wait for an OS/8 command prompt running within SIMH, then send the
# given line.
#
# The prompt string is passed in because OS/8 has several different
# prompt types.

def os8_pmt_send (prompt, send_line):
  global child

  child.expect("\n%s$" % prompt)
  for i in xrange(0, len(send_line)):
    child.send(send_line[i])
    os8_kbd_delay()
  child.send("\r")


#### back_to_simh ######################################################
# Go back to SIMH when the passed prompt string is encountered

def back_to_simh (prompt):
  global child

  child.expect("\n%s$" % prompt)
  os8_kbd_delay()
  child.sendcontrol('e')


#### check_exists ######################################################
# Check existence of all files needed

def check_exists (image_copyins):
  global child

  # Confirm necessary media images exist.
  for copyin in image_copyins:
    image = copyin[1]
    image_path = _media_dir + image
    if (not os.path.isfile(image_path)):
        print "Required file: " + image_path + " not found."
        simh_send("q")
        child.expect(pexpect.EOF)
        exit (-1)
    # else: print "Found " + image_path
   

#### copyin_pair #######################################################
# Copy two images into two destinations with two messages
#
# A copyin is a 3 element array: [destination, source, message]
# Assumes our context is "in simh".
# Assumes dt0 and dt1 are free.
# Assumes rk0 is the boot device
# Detaches dt0 and dt1 after using them.
# copyin0 mounts on dt0.  copyin1 mounts on dt1.
# Either copyin or both can be None

def copyin_pair (copyin0, copyin1):
  if debug:
    print "Copying: " + copyin0[1] + " to: " + copyin0[0] + "from dt0"
    if copyin1:
      print "Copying: " + copyin1[1] + " to: " + copyin1[0] + "from dt1"
    else: print "copyin1 is empty."
    
  if not copyin0 and not copyin1: return   # Nothing to do.
  if copyin0: simh_send("attach -r dt0 " + _media_dir + copyin0[1])
  if copyin1: simh_send("attach -r dt1 " + _media_dir + copyin1[1])
  simh_send("boot rk0")
  if copyin0:
    if progmsg: print copyin0[2]
    os8_pmt_send("\.", "COPY " + copyin0[0] + "<DTA0:*.*")
  if copyin1:
    if progmsg: print copyin1[2]
    os8_pmt_send("\.", "COPY " + copyin1[0] + "<DTA1:*.*")
  back_to_simh("\.")

  if copyin0: simh_send("detach dt0")
  if copyin1: simh_send("detach dt1")
  
def do_all_copyins (copyins):
  pair_idx = 0
  pair_ct = int(len(copyins) / 2)
  while pair_idx < pair_ct:
    copyin_pair(copyins[pair_idx * 2], copyins[pair_idx * 2 + 1])
    pair_idx += 1
  if pair_ct * 2 < len(copyins):
    copyin_pair(copyins[len(copyins) - 1], None)


  
#### make_bin ##########################################################
# Top-level driver for the "make binary OS/8 RK05 disk image" process.
#
# If there is already an RK05 binary destination image, moves it aside
# to a ".save" instance, overwriting the previous .save if it exists.
#
# One of the input images is used as a bootable Dectape.
# That Dectape gets written on.
# It needs stuff from tape #2
# So the first two Dectapes
# are treated separately and specially.
# All the other Dectape images used are read only.

def make_bin (args):

  ro_boot_tape =       "os8/al-4711c-ba-os8-v3d-1.1978.tu56"
  ro_boot_tape_path =  _media_dir + ro_boot_tape
  driver_tape =        "os8/al-4712c-ba-os8-v3d-2.1978.tu56"
  driver_tape_path =   _media_dir + driver_tape
  local_tape =         "os8/local.tu56"
  local_tape_path =    _media_dir + local_tape
  
  boot_dt_path = _media_dir + "os8/bootable-al-4711-c-ba-os8-v3d-1.1978.tu56"

  special_bin_copyins = [
    ["", ro_boot_tape,  ""],
    ['RKA0:', driver_tape, "Device Drivers..."],
    ["", local_tape, ""]
  ]

  music_copyin  = ['RKB0:', 'subsys/music.tu56',   "Copying in Music score files and source code..."]
  ba_copyin     = ['RKB0:', 'subsys/ba.tu56',      "Installing *.BA BASIC games and demos..."]
  cc8_copyin    = ['RKA0:', 'subsys/cc8.tu56',     "Installing Ian Schofield's CC8 compiler..."]
  k12_copyin    = ['RKA0:', 'subsys/k12.tu56',     "Installing Kermit-12..."]
  advent_copyin = ['RKB0:', 'subsys/advent.tu56',  "Installing ADVENT..."]

  bin_copyins = [
    ['RKA0:', "os8/al-4761c-ba-os8-v3d-ext.1978.tu56", "Copying in OS/8 V3D extensions..."],
    ['RKA0:', "os8/al-4549d-ba-fr4-v3d-1.1978.tu56", "Copying in FORTRAN IV tape 1 of 2..."],
    ['RKA0:', "os8/al-5596d-ba-fr4-v3d-2.1978.tu56", "Copying in FORTRAN IV tape 2 of 2..."],
    ['RKA0:', "os8/al-5642a-ba-macrel-linker.1978.tu56", "Installing MACREL..."]
    ]

  if args.with_music:         bin_copyins.append(music_copyin)
  if not args.without_ba:     bin_copyins.append(ba_copyin)
  if not args.without_cc8:    bin_copyins.append(cc8_copyin)
  if not args.without_k12:    bin_copyins.append(k12_copyin)
  if not args.without_advent: bin_copyins.append(advent_copyin)

  check_exists(special_bin_copyins)
  check_exists(bin_copyins)

  print "Generating " + _bin_rk05 + " from " + str(len(bin_copyins) + 2) + \
        " source tapes..."

  os8_mdir = _media_dir + 'os8/'
  image_path = _bin_dir + _bin_rk05
  if os.path.isfile(image_path):
    save_path = _bin_dir + _bin_rk05 + ".save"
    print "Pre-existing " + _bin_rk05 + " found.  Saving as " + _bin_rk05 + ".save"
    if os.path.isfile(save_path):
      print "Overwriting old " + _bin_rk05 + ".save"
      os.remove(save_path)
    os.rename(image_path, save_path)
  
  global progmsg
  if progmsg: print "Building initial OS/8 system..."
  
  if progmsg: print "Making a writeable copy of boot DECtape..."
  copyfile(ro_boot_tape_path, boot_dt_path)
  
  simh_send("attach rk0 " + _bin_dir + "os8v3d-bin.rk05")
  simh_send("attach dt0 " + boot_dt_path)
  simh_send("attach -r dt1 " + driver_tape_path)

  if progmsg: print "Performing config with BUILD..."
  simh_send("boot dt0")
  os8_pmt_send("\.", "SET SYS NO INIT")   # For Safety's Sake
  os8_pmt_send("\.", "RUN SYS BUILD")
  os8_pmt_send("\$", "LOAD DTA1:RK8ESY.BN")
  os8_pmt_send("\$", "LOAD DTA1:PT8E.BN")
  os8_pmt_send("\$", "DELETE SYS")
  os8_pmt_send("\$", "SYSTEM RK8E")
  os8_pmt_send("\$", "DELETE RXA1")
  os8_pmt_send("\$", "INSERT PT8E,PTR")
  os8_pmt_send("\$", "INSERT PT8E,PTP")
  os8_pmt_send("\$", "DELETE RKA0")
  os8_pmt_send("\$", "DELETE RKB0")
  os8_pmt_send("\$", "INSERT RK8E,RKA0,RKB0")
  os8_pmt_send("\$", "INSERT RK05,RKA2,RKB2")
  os8_pmt_send("\$", "DELETE DTA0")
  os8_pmt_send("\$", "INSERT TC,DTA0")
  os8_pmt_send("\$", "DSK RK8E:RKB0")
  os8_pmt_send("\$", "PRINT")
  os8_pmt_send("\$", "BOOT")
  os8_pmt_send("WRITE ZERO DIRECT\?", "Y")
  os8_pmt_send("\.", "SAVE SYS BUILD")
  back_to_simh("\.")
  
  if progmsg: print "Copying OS/8 system files from TU56 source to RK05 image..."
  if progmsg: print "Copying in system tape 1 of 2..."
  simh_send("boot dt0")
  os8_pmt_send("\.", "COPY RKA0:<DTA0:*.*")

  # There are not enough directory entries to put everything
  # Including all device drivers on the running packs.
  # So we DONT copy in the device drivers, nor TDINIT.SV,
  # nor the two TD8E-based Dectape system area files.
  # CCL.PA and KL8E.PA will be on the source disk.
  # However Dectape 2 has HELP.HL and .RL files that ARE needed.
  # if progmsg: print "Copying in system tape 2 of 2..."
  # os8_pmt_send("\.", "COPY RKA0:<DTA1:*.*")

  if progmsg: print "Copying in Fortran II libraries and help files from tape 2 of 2"
  os8_pmt_send("\.", "COPY RKA0:<DTA1:*.RL")
  os8_pmt_send("\.", "COPY RKA0:<DTA1:*.HL")
  os8_pmt_send("\.", "ZERO RKB0:")      # must precede subsys/* copies

  back_to_simh("\.")
  
  if progmsg: print "Deleting bootable copy of DECtape image and"
  if progmsg: print "rebooting into freshly-built RK05 OS/8 system..."
  simh_send("detach dt0")
  simh_send("detach dt1")
  os.remove(boot_dt_path)

  if progmsg: print "Performing remaining copies/installs..."
  do_all_copyins(bin_copyins)

  # Any further initialization of installed software is done here.
  simh_send("attach -r dt0 " + local_tape_path)
  simh_send("boot rk0")

  if progmsg: print "Installing lower case and uppercase config batch scripts..."
  os8_pmt_send("\.", "COPY RKA0:<DTA0:LC??S.BI")
  os8_pmt_send("\.", "COPY RKA0:<DTA0:LC??S.BI")
  
  if not args.without_crt:
    # NO SCOPE mode is the default on distribution tapes.
    if progmsg: print "Configuring scope-style rubout processing..."
    os8_pmt_send("\.", "SET TTY SCOPE")
  
  if not args.without_chess:
    if progmsg: print "Installing CHESS.SV binary and CHESS.TX documentation..."
    os8_pmt_send("\.", "COPY RKA0:<DTA0:CHESS.*")

  if args.with_vtedit:
    if progmsg: print "Installing TECO VTEDIT setup..."
    os8_pmt_send("\.", "COPY RKA0:<DTA0:VTEDIT.*")
    os8_pmt_send("\.", "COPY RKA0:<DTA0:TECO.IN")

  if not args.without_lcmod:
    if progmsg: print "Patching OS/8 to upcase commands only; SIMH is set not to auto-upcase."
    os8_pmt_send("\.", "SUBMIT SYS:LCSYS.BI")
    if progmsg: print "Patching OS/8 BASIC to cope with lower case input"
    os8_pmt_send("\.", "SUBMIT SYS:LCBAS.BI")
  
  if progmsg: print "Cleaning up..."
  back_to_simh("\.")
  simh_send("detach dt0")
  simh_send("detach rk0")



#### make_src ##########################################################
# Source-disk version of make_bin() above.

def make_src (args):
  src_copyins = [
    ["RKA1:", "os8/al-4691c-sa-os8-v3d-1.1978.tu56", "...part 1 of 7..."],
    ["RKA1:", "os8/al-4692c-sa-os8-v3d-2.1978.tu56", "...part 2 of 7..."],
    ["RKA1:", "os8/al-4693d-sa-os8-v3d-3.1978.tu56", "...part 3 of 7..."],
    ["RKA1:", "os8/al-4694c-sa-os8-v3d-4.1978.tu56", "...part 4 of 7..."],
    ["RKB1:", "os8/al-4695c-sa-os8-v3d-5.1978.tu56", "...part 5 of 7..."],
    ["RKB1:", "os8/al-4696c-sa-os8-v3d-6.1978.tu56", "...part 6 of 7..."],
    ["RKB1:", "os8/al-4697c-sa-os8-v3d-7.1978.tu56", "...part 7 of 7..."],
    ["RKB1:", "os8/al-4759c-sa-os8-ext-1.1978.tu56", "extensions part 1 of 3..."],
    ["RKB1:", "os8/al-4760c-sa-os8-ext-2.1978.tu56", "...part 2 of 3..."],
    ["RKA1:", "os8/al-5586c-sa-os8-ext-3.1978.tu56", "...part 3 of 3..."],
  ]
  
  check_exists(src_copyins)

  print "Generating " + _src_rk05 + " from " + str(len(src_copyins)) + \
        " source tapes..."

  image_path = _bin_dir + _bin_rk05
  if (not os.path.isfile(image_path)):
    print _bin_rk05 + " is needed to build src.  Creating..."
    make_bin(args)

  image_path = _bin_dir + _src_rk05
  if os.path.isfile(image_path):
    save_path = _bin_dir + _src_rk05 + ".save"
    print "Pre-existing " + _src_rk05 + " found.  Saving as " + _src_rk05 + ".save"
    if os.path.isfile(save_path):
      print "Overwriting old " + _src_rk05 + ".save"
      os.remove(save_path)
    os.rename(image_path,save_path)
    
  if progmsg: print "Copying OS/8 source distribution:"
  simh_send("attach rk0 " + _bin_dir + "os8v3d-bin.rk05")
  simh_send("attach rk1 " + _bin_dir + "os8v3d-src.rk05")

  simh_send("boot rk0")
  
  os8_pmt_send("\.", "ZERO RKA1:")
  os8_pmt_send("\.", "ZERO RKB1:")

  back_to_simh("\.")

  do_all_copyins(src_copyins)

  if progmsg: print "Cleaning up..."
  simh_send("detach rk0")
  simh_send("detach rk1")


#### main ##############################################################
# Program entry point.  Parses the command line and drives the above.

def main ():
  # Parse the command line
  # os8 is a place holder for future functionality if we decide
  # to have a separate master RK05 sys pack and a runnable os8 pack.
  allowed_acts = ["all", "bin", "src", "os8"]
  parser = argparse.ArgumentParser(description='Build OS/8 RK05 disk images')
  parser.add_argument('-v', '--verbose',
                      action='store_true',
                      help='verbose SIMH output instead of progress messages')
  parser.add_argument('--with-music',
                      action='store_true',
                      default=False,
                      help='add *.MU files to binary disk')
  parser.add_argument('--without-ba',
                      action='store_true',
                      default=False,
                      help='leave BASIC games and demos off binary disk')
  parser.add_argument('--without-cc8',
                      action='store_true',
                      default=False,
                      help='leave CC8 off binary disk')
  parser.add_argument('--without-k12',
                      action='store_true',
                      default=False,
                      help='leave 12-bit Kermit off binary disk')
  parser.add_argument('--with-vtedit',
                      action='store_true',
                      default=False,
                      help='Install and enable TECO vtedit mode')
  parser.add_argument('--without-crt',
                      action='store_true',
                      default=False,
                      help='console is a printing terminal and does not use character overwrite on rubout')
  parser.add_argument('--without-lcmod',
                      action='store_true',
                      default=False,
                      help='Disable the OS/8 command upcasing patch; best set when SIMH is set to tti ksr mode')
  parser.add_argument('--without-advent',
                      action='store_true',
                      default=False,
                      help='leave game of Adventure off binary disk')
  parser.add_argument('--without-chess',
                      action='store_true',
                      default=False,
                      help='Leave CHEKMO-II off binary disk')
  parser.add_argument('what',
                      choices=allowed_acts,
                      help='select which RK05 media gets built; default is "all"',
                      nargs=argparse.REMAINDER)
  args = parser.parse_args()
  if len(args.what) == 0: args.what = [ 'all' ]
  global progmsg
  progmsg = not args.verbose

  # Initialize our acts dict.
  acts = {}
  for this in allowed_acts:
    acts[this] = False

  for act in args.what:
    if act not in allowed_acts:
      print "Invalid act: " + act + " ignored."
      continue
    if act == "all":
      for this in allowed_acts:
        acts[this] = True
      break
    acts[act] = True
  
  global child
  child = pexpect.spawn('@builddir@/bin/pidp8i-sim')
  child.delaybeforesend = None

  # Log SIMH and OS/8 output to a file by default, but send it to the
  # console instead of the progress messages if -v was given using the
  # trick from https://stackoverflow.com/questions/21239338
  child.logfile = open('@builddir@/obj/mkos8.log', 'w') \
    if progmsg else os.fdopen(sys.stdout.fileno(), 'w', 0)

  if acts["bin"]: make_bin(args)
  if acts["src"]: make_src(args)
  
  simh_send("q")
  child.expect(pexpect.EOF)
  if progmsg: print "Done!"


if __name__ == "__main__":
    main()
