#!/bin/bash
SRCSUBDIR="@srcdir@/src"
PRGNAME="$(basename "$0")"
WORKDIR="@builddir@/$PRGNAME-temp"
OUR_SIMH_DIR="$WORKDIR/simh/ours"
CURR_SIMH_DIR="$WORKDIR/simh/curr"
LOGFILE="$WORKDIR/output.log"
PATCHFILE="$WORKDIR/pidp8i.patch"
OLD_SGCID=$(grep ^SGCID "@srcdir@"/Makefile.in | cut -f2 -d=)

rm -rf "$WORKDIR"
mkdir -p "$WORKDIR"

# From here on, send all output to the log file.
# Code based on http://stackoverflow.com/a/20564208/142454
exec 1<&-
exec 2<&-
exec 1<>"$LOGFILE"
exec 2>&1
function say() {
	echo "$@" >> /dev/tty
}

# Bail on errors so we don't have to test everything.  Ideally, nothing
# from here on will fail.  If it does, the log file will explain it.
# Code based on http://stackoverflow.com/a/185900/142454
function error() {
	lineno="$1"
	message="$2"
	code="${3:-1}"
	if [ -n "$message" ] ; then message=": $message" ; fi
	read -r -d '%' errmsg <<ERROR
Error on or near line $lineno, code ${code}$message!  (See log file for
more info: $LOGFILE)
%
ERROR
	say
	say "$errmsg"
	say
	exit $code
}
trap 'error ${LINENO}' ERR

# Deal with uncommitted changes in $SRCSUBDIR
cd "$SRCSUBDIR/.."		# we need the src/ prefix to do this test properly!
if [ $(fossil status | grep '^EDITED.*src/' | wc -l) -gt 0 ]
then
	if [ "$1" = "-f" ]
	then
		say "Tossing uncommitted changes in $SRCSUBDIR..."
		fossil revert $(fossil status | grep '^EDITED.*src/' | cut -f 2- -d' ')
		shift
	else
		read -r -d '%' errmsg <<ERROR
Cowardly refusing to update SIMH to the current upstream version while
there are uncommitted changes in $SRCSUBDIR.  Say

    make simh-update-f

or pass -f to force those changes to be tossed.
%
ERROR
		say
		say "$errmsg"
		say
		exit 3
	fi
fi
cd "@builddir@"

# Retreive the tip-of-master and $OLD_SGCID versions of SIMH
say Retreiving upstream SIMH versions...
mkdir -p "$OUR_SIMH_DIR"
mkdir -p "$CURR_SIMH_DIR"
git clone https://github.com/simh/simh "$CURR_SIMH_DIR"
pushd "$CURR_SIMH_DIR"
NEW_SGCID=$(git rev-parse HEAD)
git worktree add "$OUR_SIMH_DIR" $OLD_SGCID
popd

# Rename upstream Git paths to match our *.in files so that our produced
# patches are made against those higher-level versions.  If we didn't do
# this, we'd have to manually resubstitute variables for absolute paths.
say Renaming upstream files to match our \*.in variants...
find "$SRCSUBDIR" -name \*.in -print | while read f
do
	inf="${f#$SRCSUBDIR/}"	# make path fully relative
	genf="${inf%.in}"		# remove .in from the end
	mv  "$OUR_SIMH_DIR/$genf"  "$OUR_SIMH_DIR/$inf"
	mv "$CURR_SIMH_DIR/$genf" "$CURR_SIMH_DIR/$inf"
done

# Produce a patch file for modifying the upstream $OLD_SGCID version to
# merge in our local changes.
#
# For some reason, diff(1) returns an error when we do this, at least on
# OS X.  Perhaps it is not happy about the fact that the file set in
# each tree is different?  Regardless of reason, we must check for a
# non-empty patch file to determine whether an actual error occurred.
say Producing clean patch file from upstream ${OLD_SGCID:0:8} version
say to our local PiDP-8/I version...
if ! diff -ru "$OUR_SIMH_DIR" "$SRCSUBDIR" | grep -v '^Only in' > "$PATCHFILE" &&
		 [ ! -s "$PATCHFILE" ]
then
	error $LINENO "patch generation failed" 2
fi

# For each file in src that is also present in the current upstream
# version of SIMH, overwrite our version.
find "$SRCSUBDIR" -type f -print | while read f
do
	base="${f#$SRCSUBDIR}"
	upstream="$CURR_SIMH_DIR/$base"
	test -e "$upstream" && cp "$upstream" "$f"
done

# Now try to apply the patch we made above to the upstream files.
patch -p0 < "$PATCHFILE"

# No error, so save the new tip-of-master Git commit ID and rebuild
say "Patch appears to have applied cleanly.  Attempting a rebuild..."
sed -e "s/^SGCID=.*/SGCID=$NEW_SGCID/" -i tmp @srcdir@/Makefile.in
tools/mmake

# Restore stdout and let the human test it
say "Build completed without error.  Starting OS/8 in the simulator..."
say
say "(Nuke $WORKDIR when finished.)"
say
exec 1<&-
exec 1<>/dev/tty
exec make os8test
