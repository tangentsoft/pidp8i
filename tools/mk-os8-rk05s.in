#!/usr/bin/python
# -*- coding: utf-8 -*-
########################################################################
# mk-os8-rk05s - Build media/os8/*.rk05 from media/os8/*.tu56 and other
#   source media by scripting commands to SIMH and OS/8.
#
# Copyright Â© 2017 by Jonathan Trites, William Cattey, and Warren Young.
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS LISTED ABOVE BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
# OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the names of the authors above
# shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written
# authorization from those authors.
########################################################################

import argparse
import os
import sys
import subprocess
import pexpect
import time


#### globals and constants #############################################

child = None

# Flag set when -v is *not* given.  Causes make_*() and the functions
# called thereby to print progress messages to the console since SIMH
# and OS/8 output is not being sent there to clue the user into the
# script's progress.
progmsg = True

_media_dir = "@builddir@/media/os8/"
_bin_rk05 = "os8v3d-bin.rk05"
_src_rk05 = "os8v3d-src.rk05"


#### simh_send #########################################################
# Wait for a SIMH command prompt and then send the given line

def simh_send (send_line):
  global child

  child.expect("sim> $")
  child.sendline(send_line)


#### os8_pmt_send ######################################################
# Wait for an OS/8 command prompt running within SIMH, then send the
# given line.
#
# The prompt string is passed in because OS/8 has several different
# prompt types.
#
# FIXME: This function has hard-coded delay constants, apparently to
# deal with the way OS/8 is run underneath SIMH.  This is likely either
# brittle or wasteful with respect to the host system's CPU speed.
# There must be a better way.  

def os8_pmt_send (prompt, send_line):
  global child

  child.expect("\n%s$" % prompt)
  time.sleep(0.5)
  for i in xrange(0, len(send_line)):
    child.send(send_line[i])
  child.send("\r")


#### os8_send ##########################################################
# Send a line of text to OS/8.
#
# FIXME: The intent here is to resume OS/8 after sending "cont" to simh.
# It doesn't seem to work yet.  For now we just reboot into OS/8 after
# attaching new devices.

def os8_send (send_line):
  global child

  time.sleep(0.5)
  for i in xrange(0, len(send_line)):
    child.send(send_line[i])
  child.send("\r")


#### back_to_simh ######################################################
# Go back to SIMH when the passed prompt string is encountered

def back_to_simh (prompt):
  global child

  child.expect("\n%s$" % prompt)
  time.sleep(0.50)
  child.sendcontrol('e')


#### check_exists ######################################################
# Check existence of all files needed

def check_exists (_media_dir, images):
  global child

  # Confirm necessary media images exist.
  for image in images:
    image_path = _media_dir+image
    if (not os.path.isfile(image_path)):
        print "Required file: " + image_path + "not found."
        simh_send("q")
        child.expect(pexpect.EOF)
        exit (-1)


#### make_binary #######################################################
# Top-level driver for the "make binary OS/8 RK05 disk image" process.
#
# If there is already an RK05 binary destination image, moves it aside
# to a ".save" instance, overwriting the previous .save if it exists.

def make_binary ():
  bin_images = [
    "al-4711c-ba-os8-v3d-1.1978.tu56",
    "al-4712c-ba-os8-v3d-2.1978.tu56",
    "al-4761c-ba-os8-v3d-ext.1978.tu56",
    "al-4549d-ba-fr4-v3d-1.1978.tu56",
    "al-5596d-ba-fr4-v3d-2.1978.tu56",
    "al-5642a-ba-macrel-linker.1978.tu56"
  ]
  check_exists(_media_dir, bin_images)

  print "Generating " + _bin_rk05 + " from " + str(len(bin_images)) + \
        " source tapes..."

  image_path = _media_dir + _bin_rk05
  if os.path.isfile(image_path):
    save_path = _media_dir + _bin_rk05 + ".save"
    print "Pre-existing " + _bin_rk05 + " found.  Saving as " + _bin_rk05 + ".save"
    if os.path.isfile(save_path):
      print "Overwriting old " + _bin_rk05 + ".save"
      os.remove(save_path)
    os.rename(image_path, save_path)
  
  global progmsg
  if progmsg: print "Building initial OS/8 system..."
  simh_send("attach rk0 " + _media_dir + "os8v3d-bin.rk05")
  simh_send("attach dt0 " + _media_dir + "al-4711c-ba-os8-v3d-1.1978.tu56")
  simh_send("attach dt1 " + _media_dir + "al-4712c-ba-os8-v3d-2.1978.tu56")
  simh_send("boot dt0")
  os8_pmt_send("\.", "RUN SYS BUILD")
  os8_pmt_send("\$", "LOAD DTA1:RK8ESY.BN")
  os8_pmt_send("\$", "LOAD DTA1:PT8E.BN")
  os8_pmt_send("\$", "DELETE SYS")
  os8_pmt_send("\$", "DSK RK8E:SYS")
  os8_pmt_send("\$", "SYSTEM RK8E")
  os8_pmt_send("\$", "DELETE RXA1")
  os8_pmt_send("\$", "INSERT PT8E,PTR")
  os8_pmt_send("\$", "INSERT PT8E,PTP")
  os8_pmt_send("\$", "DELETE RKA0")
  os8_pmt_send("\$", "DELETE RKB0")
  os8_pmt_send("\$", "INSERT RK8E,RKA0,RKB0")
  os8_pmt_send("\$", "INSERT RK05,RKA2,RKB2")
  os8_pmt_send("\$", "DELETE DTA0")
  os8_pmt_send("\$", "INSERT TC,DTA0")
  os8_pmt_send("\$", "PRINT")
  os8_pmt_send("\$", "BOOT")
  os8_pmt_send("WRITE ZERO DIRECT\?", "Y")
  os8_pmt_send("\.", "SAVE SYS BUILD")
  back_to_simh("\.")
  
  if progmsg: print "Copying OS/8 system files from TU56 source to RK05 image..."
  simh_send("boot dt0")
  os8_pmt_send("\.", "COPY RKA0:<DTA0:*.*")
  os8_pmt_send("\.", "COPY RKA0:<DTA1:*.*")
  back_to_simh("\.")
  
  if progmsg: print "Rebooting into freshly-built OS/8 system..."
  simh_send("detach dt0")
  simh_send("detach dt1")
  simh_send("attach dt0 " + _media_dir + "al-4761c-ba-os8-v3d-ext.1978.tu56")
  simh_send("boot rk0")
  
  if progmsg: print "Installing OS/8 V3D extensions..."
  os8_pmt_send("\.", "COPY RKA0:<DTA0:*.*")
  os8_pmt_send("\.", "RESORC /L")    # we might be logging output to console
  back_to_simh("\.")
  
  if progmsg: print "Installing FORTRAN IV..."
  simh_send("detach dt0")
  simh_send("attach dt0 " + _media_dir + "al-4549d-ba-fr4-v3d-1.1978.tu56")
  simh_send("attach dt1 " + _media_dir + "al-5596d-ba-fr4-v3d-2.1978.tu56")
  simh_send("boot rk0")
  os8_pmt_send("\.", "COPY RKA0:<DTA0:*.*")
  os8_pmt_send("\.", "COPY RKA0:<DTA1:*.*")
  back_to_simh("\.")
  
  if progmsg: print "Installing MACREL..."
  simh_send("detach dt0")
  simh_send("detach dt1")
  simh_send("attach dt0 " + _media_dir + "al-5642a-ba-macrel-linker.1978.tu56")
  simh_send("boot rk0")
  os8_pmt_send("\.", "COPY RKA0:<DTA0:*.*")
  back_to_simh("\.")

  if progmsg: print "Cleaning up..."
  simh_send("detach rk0")
  simh_send("detach rk1")
  simh_send("detach dt0")
  simh_send("detach dt1")


#### make_src ##########################################################
# Source-disk version of make_binary() above.

def make_src ():
  src_images = [
    "al-4691c-sa-os8-v3d-1.1978.tu56",
    "al-4692c-sa-os8-v3d-2.1978.tu56",
    "al-4693d-sa-os8-v3d-3.1978.tu56",
    "al-4694c-sa-os8-v3d-4.1978.tu56",
    "al-4695c-sa-os8-v3d-5.1978.tu56",
    "al-4696c-sa-os8-v3d-6.1978.tu56",
    "al-4697c-sa-os8-v3d-7.1978.tu56",
    "al-4759c-sa-os8-ext-1.1978.tu56",
    "al-4760c-sa-os8-ext-2.1978.tu56",
    "al-5586c-sa-os8-ext-3.1978.tu56"
  ]
  check_exists(_media_dir, src_images)

  print "Generating " + _src_rk05 + " from " + str(len(src_images)) + \
        " source tapes..."

  image_path = _media_dir + _bin_rk05
  if (not os.path.isfile(image_path)):
    print _bin_rk05 + " is needed to build src.  Creating..."
    make_binary()

  image_path = _media_dir + _src_rk05
  if os.path.isfile(image_path):
    save_path = _media_dir + _src_rk05 + ".save"
    print "Pre-existing " + _src_rk05 + " found.  Saving as " + _src_rk05 + ".save"
    if os.path.isfile(save_path):
      print "Overwriting old " + _src_rk05 + ".save"
      os.remove(save_path)
    os.rename(image_path,save_path)
    
  if progmsg: print "Copying OS/8 source distribution:"
  simh_send("attach rk0 " + _media_dir + "os8v3d-bin.rk05")
  simh_send("attach rk1 " + _media_dir + "os8v3d-src.rk05")
  simh_send("attach -r dt0 " + _media_dir + "al-4691c-sa-os8-v3d-1.1978.tu56")
  simh_send("attach -r dt1 " + _media_dir + "al-4692c-sa-os8-v3d-2.1978.tu56")
  simh_send("boot rk0")
  
  os8_pmt_send("\.", "ZERO RKA1:")
  if progmsg: print "...part 1 of 7..."
  os8_pmt_send("\.", "COPY RKA1:<DTA0:*.*")
  if progmsg: print "...part 2 of 7..."
  os8_pmt_send("\.", "COPY RKA1:<DTA1:*.*")
  
  back_to_simh("\.")
  
  simh_send("detach dt0")
  simh_send("detach dt1")
  simh_send("attach -r dt0 " + _media_dir + "al-4693d-sa-os8-v3d-3.1978.tu56")
  simh_send("attach -r dt1 " + _media_dir + "al-4694c-sa-os8-v3d-4.1978.tu56")
  simh_send("boot rk0")

  if progmsg: print "...part 3 of 7..."
  os8_pmt_send("\.", "COPY RKA1:<DTA0:*.*")
  if progmsg: print "...part 4 of 7..."
  os8_pmt_send("\.", "COPY RKA1:<DTA1:*.*")
  
  back_to_simh("\.")

  simh_send("detach dt0")
  simh_send("detach dt1")
  simh_send("attach -r dt0 " + _media_dir + "al-4695c-sa-os8-v3d-5.1978.tu56")
  simh_send("attach -r dt1 " + _media_dir + "al-4696c-sa-os8-v3d-6.1978.tu56")
  simh_send("boot rk0")
  
  os8_pmt_send("\.", "ZERO RKB1:")
  if progmsg: print "...part 5 of 7..."
  os8_pmt_send("\.", "COPY RKB1:<DTA0:*.*")
  if progmsg: print "...part 6 of 7..."
  os8_pmt_send("\.", "COPY RKB1:<DTA1:*.*")
  
  back_to_simh("\.")
  
  simh_send("detach dt0")
  simh_send("detach dt1")
  simh_send("attach -r dt0 " + _media_dir + "al-4697c-sa-os8-v3d-7.1978.tu56")
  simh_send("attach -r dt1 " + _media_dir + "al-4759c-sa-os8-ext-1.1978.tu56")
  simh_send("boot rk0")
  
  if progmsg: print "...part 7 of 7..."
  os8_pmt_send("\.", "COPY RKB1:<DTA0:*.*")
  if progmsg: print "Copying OS/8 V3D extensions:"
  if progmsg: print "...part 1 of 3..."
  os8_pmt_send("\.", "COPY RKB1:<DTA1:*.*")
  
  back_to_simh("\.")
  
  simh_send("detach dt0")
  simh_send("detach dt1")
  simh_send("attach -r dt0 " + _media_dir + "al-4760c-sa-os8-ext-2.1978.tu56")
  simh_send("attach -r dt1 " + _media_dir + "al-5586c-sa-os8-ext-3.1978.tu56")
  simh_send("boot rk0")
  
  if progmsg: print "...part 2 of 3..."
  os8_pmt_send("\.", "COPY RKB1:<DTA0:*.*")
  if progmsg: print "...part 3 of 3..."
  os8_pmt_send("\.", "COPY RKA1:<DTA1:*.*")

  back_to_simh("\.")

  if progmsg: print "Cleaning up..."
  simh_send("detach rk0")
  simh_send("detach rk1")
  simh_send("detach dt0")
  simh_send("detach dt1")


#### main ##############################################################
# Program entry point.  Parses the command line and drives the above.

def main ():
  # Parse the command line
  allowed_acts = ["all", "bin", "src", "os8"]
  parser = argparse.ArgumentParser(description='Build OS/8 RK05 disk images')
  parser.add_argument('-v', '--verbose',
                      action='store_true',
                      help='verbose SIMH output instead of progress messages')
  parser.add_argument('what',
                      choices=allowed_acts,
                      help='select which RK05 media gets built; default is "all"',
                      nargs=argparse.REMAINDER)
  args = parser.parse_args()
  if len(args.what) == 0: args.what = [ 'all' ]
  global progmsg
  progmsg = not args.verbose

  # Initialize our acts dict.
  acts = {}
  for this in allowed_acts:
    acts[this] = False

  for act in args.what:
    if act not in allowed_acts:
      print "Invalid act: " + act + " ignored."
      continue
    if act == "all":
      for this in allowed_acts:
        acts[this] = True
      break
    acts[act] = True
  
  global child
  child = pexpect.spawn('@builddir@/bin/pidp8i-sim')

  # Log SIMH and OS/8 output to a file by default, but send it to the
  # console instead of the progress messages if -v was given using the
  # trick from https://stackoverflow.com/questions/21239338
  child.logfile = open('@builddir@/obj/mk-os8-rk05s.log', 'w') \
    if progmsg else os.fdopen(sys.stdout.fileno(), 'w', 0)

  if acts["bin"]: make_binary()
  if acts["src"]: make_src()
  
  simh_send("q")
  child.expect(pexpect.EOF)
  if progmsg: print "Done!"


if __name__ == "__main__":
    main()
