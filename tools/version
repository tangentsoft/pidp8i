#!/usr/bin/env perl
########################################################################
# tools/version - Print a string summarizing the software version
#
# Copyright Â© 2017 Warren Young
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS LISTED ABOVE BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
# OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the names of the authors above
# shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written
# authorization from those authors.
########################################################################

use strict;
use warnings;

use Cwd 'abs_path';
use File::Basename;

my $topdir = dirname($0) . '/..';
if (not -e "$topdir/.fslckout") {
	# We're not within a Fossil checkout, so try to get the version
	# number from the top directory name.
	$topdir = basename(abs_path($topdir));
	my ($v) = $topdir =~ m{v\d+};
	print 'pkg:', ($v ? $v : 'vUNKNOWN'), "\n";
	exit 0;
}

# Get version info from Fossil
my ($branch, $checkout, $version);
open my $s, '-|', 'fossil status';
while (<$s>) {
	chomp;
	my ($attr, $value) = split /:\s+/;

	if ($attr =~ m{^checkout}) {
		my @elems = split ' ', $value;
		$checkout = substr($elems[0], 0, 8);
	}
	elsif ($attr =~ m{tags}) {
		my @tags = split /, /, $value;
		for my $t (@tags) {
			if ($t =~ m{^v}) {
				$version = $t;
			}
			else {
				$branch = $t;
			}
		}
	}
}
close $s;
print $branch, ':', ($version || "r$checkout");
