#!/bin/bash
# bosi - The Binary OS Image creation/update script
#
# Copyright Â© 2016-2017 by Warren Young
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS LISTED ABOVE BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
# THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 
# Except as contained in this notice, the names of the authors above shall
# not be used in advertising or otherwise to promote the sale, use or
# other dealings in this Software without prior written authorization from
# those authors.


# Display the usage message
function usage() {
    cat <<USAGE
usage: $0 <verb> [tag]

    The available verbs are init, build, prepare, shrink, image, and finish.

    You may include a tag parameter with the 'image' and 'finish' verbs
    to override the default tag ('ils') used in image and zip file
    outputs.

    See RELEASE-PROCESS.md for more info.

USAGE
    exit 1
}

verb="$1"
tag="$2"
test -n "$verb" || usage
test -z "$tag" && tag=ils

nu=pidp8i
nh=/home/$nu
repo=pidp8i
dldir="$HOME/tangentsoft.com/dl"
os=jessie-lite
img=$dldir/pidp8i-$(date +%Y.%m.%d)-$tag-$os.img
greadlink=$(type -p greadlink || type -p readlink)
this=$($greadlink -f $0)
topdir="$($greadlink -f "$(dirname "$this")"/..)"


# Initial steps
function do_init() {
    if [ "$USER" != "root" ]
    then
        echo "The init step has to be run as root.  The explanation is"
        echo "given in the section for 'init' in RELEASE-PROCESS.md."
        echo
        exit 1
    fi

    set -x

    apt-get update && apt-get -y upgrade || true

    test -f /usr/include/curses.h || apt-get -y install libncurses-dev
	test -h /media/usb || apt-get -y install usbmount

    if [ -z "$(type -p fossil)" ]
    then
        bn=fossil-release
        tb=$bn.tar.gz
        wget -O $tb https://fossil-scm.org/index.html/tarball/$bn?uuid=release
        apt-get -y install libssl-dev
        ( tar xf $tb && cd $bn && ./configure && make -j3 && make install )
        chown -R pi.pi $bn
        rm $tb
    fi

    if [ ! -e "$nh" ]
    then
        # First pass on a clean SD card: rename 'pi' user and group to
        # 'pidp8i' and rename its home directory to match.
        usermod  -l $nu -d $nh -m pi 
        groupmod -n $nu pi
    fi

    sed -i.orig \
            -e 's/^FS_MOUNTO.*/FS_MOUNTOPTIONS="-fstype=vfat,dmask=0000,fmask=0000"/' \
            /etc/usbmount/usbmount.conf

    reboot
}


# Clone repo and build the software under [new] pidp8i account
function do_build() {
    if [ "$USER" != "$nu" ]
    then
        echo "The build step has to be run as $nu."
        echo
        exit 1
    fi

    set -x

    if [ ! -d museum ]
    then
        mkdir -p museum $repo
        fossil clone https://tangentsoft.com/$repo museum/$repo.fossil
    fi

    cd $repo

    if [ -r ChangeLog.md ]
    then
        fossil revert           # just in case
        fossil update release
    else
        fossil open ~/museum/$repo.fossil release
        ./configure
    fi

    tools/mmake
    sudo make install || true       # don't care about return code
    sudo reboot
}


# This script prepares the OS's configuration to a clean first boot state.
function do_prepare() {
    if [ "$USER" != "$nu" ]
    then
        echo "The prepare step has to be run as $nu."
        echo
        exit 1
    fi

    set -x

    history -c ; rm -f ~/.bash_history

    sudo shred -u /etc/ssh/*key* || true              # allow multiple passes
    sudo dphys-swapfile uninstall || true
    sudo time dd if=/dev/zero of=/junk bs=1M || true  # it *will* error-out!
    sudo rm -f /junk

    encpass=$(openssl passwd -1 edsonDeCastro1968)
    sudo usermod -p $encpass pidp8i
    sudo passwd -e pidp8i

    sudo poweroff
}


# Shrink the filesystem on the OS SD card we're about to image to just a
# bit bigger than required to hold its present contents.
#
# The extra 100 megs in the arithmetic below accounts for the /boot
# partition, since the `resizepart` command takes a partition end value,
# not a size value.
#
# We don't calculate the actual end of the /boot partition and use that
# value because we want a bit of slack space to buy time for an end user
# who neglects to expand the card image into the free space available on
# their SD card after first boot.
function do_shrink() {
    test "$USER" = "root" || exec sudo $this shrink

    set -x

    umount /dev/sda2 || true    # might auto-mount, might not
    e2fsck -f /dev/sda2         # resize2fs demands it

    # Pack it down tight
    blocks=$(
        resize2fs -M /dev/sda2 2>&1 |
        grep 'blocks long' | 
        grep -wo '[0-9]\+'
    )
    if [ "$blocks" -gt 0 ]
    then
        # And now give it a bit of breathing room
        parted /dev/sda resizepart 2 $(($blocks * 4096 + 10**8))b
        resize2fs /dev/sda2
        poweroff
    else
        echo "Failed to extract new filesystem size from resize2fs!"
        echo
        exit 1
    fi
}


# This script images the OS SD card in a USB reader on a Mac OS X box.
function do_image() {
    while read line
    do
        case $line in
            /dev/*)
                dev=$(echo $line | cut -f1 -d' ')
                ;;

            0:*)
                case $line in
                    *FDisk_partition_scheme*) ;;
                    *) dev= ;;      # can't be the OS SD card
                esac
                ;;

            1:*)
                case $line in
                    *Windows_FAT_32\ boot*) ;;
                    *) dev= ;;      # can't be the OS SD card
                esac
                ;;

            2:*)
                case $line in
                    *Linux\ Untitled*) break ;; # found it!
                    *) dev= ;;      # can't be the OS SD card
                esac
                ;;
        esac
    done < <(diskutil list)

    if [ -z "$dev" ]
    then
        echo "Failed to find OS SD card!"
        echo
        exit 1
    fi

    echo
    echo "-------------------------------------------------------"
    diskutil info "$dev"
    echo "-------------------------------------------------------"
    echo
    read -p "Is that the OS SD card? [y/N]: " answer
    case $answer in
        [Yy]*) ;;
        *) exit 1
    esac

    dev=${dev/disk/rdisk}               # speeds zeroing and re-imaging

    mf=/tmp/MANIFEST.txt
    readme=/tmp/README.md
    cp "$topdir/doc/OS-images.md" $readme

    set -x

    diskutil unmountDisk $dev           # it auto-mounted
    sudo time dd if=$dev bs=1m of=$img
    sum=($(shasum "$img"))
    bytes=($(wc -c $img))

    cat > $mf <<MF
SHA256 hash and size of ${sum[1]}:

Hash:  ${sum[0]}
Size:  ${bytes[0]}
MF

    imgdir="$(dirname "$img")"
    sed -i '' -e "s_$imgdir/__" "$mf"   # nix local paths in manifest
    unix2dos $mf                        # might be opened on Windows
    time zip -9j $img.zip $img $mf $readme
    rm -f $mf $readme

    # Now re-image the card, starting with a zeroed card to ensure a
    # clean test.  Ignore the end-of-device error from the zero step.
    sudo time dd if=/dev/zero of=$dev bs=1m || true
    sudo time dd if=$img of=$dev bs=1m
    diskutil unmountDisk $dev || true   # Paragon ExtFS might be installed
}


# Clean up after the above
function do_finish() {
    set -x

    rmtrash $img
    cd $dldir/..
    make synch
}


# Main routine
set -e
case "$verb" in
    in*) do_init ;;
    bu*) do_build ;;
    pr*) do_prepare ;;
    sh*) do_shrink ;;
    im*) do_image ;;
    fi*) do_finish ;;
    *)   usage ;;
esac
