


      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 1


    1             / Project Euler Problem #1, Multiples of 3 and 5:
    2             /
    3             /   If we list all the natural numbers below 10 that are multiples of
    4             /   3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    5             /   Find the sum of all the multiples of 3 or 5 below 1000.
    6             / 
    7             / Solution by Warren Young of tangentsoft.com, 2016.11.29
    8             ////////////////////////////////////////////////////////////////////////
    9             
   10             
   11             ////////////////////////////////////////////////////////////////////////
   12             / DIY ASSEMBLER INSTRUCTIONS
   13             
   14             / Our assembler doesn't know the EAE instructions, so teach it
   15       7407  DVI=7407                / integer divide .+1 into {AC:MQ}, answer in MQ
   16       7405  MUY=7405                / integer multiply MQ by .+1, answer in {AC:MQ}
   17             
   18             / Combined microcoded instruction aliases
   19       7300  CLR=CLA CLL             / clear both AC and L
   20       7701  MCM=CLA MQA             / move MQ to AC
   21       7041  TCA=CMA IAC             / two's complement the accumulator
   22       7521  XMA=MQA MQL             / exchange MQ and AC
   23       7201  AC1=CLA IAC             / set AC to 1
   24             
   25             
   26             //// MAIN //////////////////////////////////////////////////////////////
   27             / Program entry point.   We purposely reinitialize global variables and
   28             / processor state in case we're restarting this program in-core.
   29             
   30             PAGE 1
   31 00200 7300  MAIN,   CLR
   32 00201 1377          TAD (3)
   33 00202 3206          DCA CURR        / start with 3, because we know 1 & 2 can't work
   34 00203 3207          DCA TOTAL       / reset total to 0
   35 00204 6046          TLS             / send null to terminal to get flags set right
   36 00205 5215          JMP MLCORE
   37 00206 0000  CURR,   0               / current number we're checking
   38 00207 0000  TOTAL,  0               / the answer so far; at the end, printed out
   39             
   40             / Constants
   41                     DECIMAL
   42 00210 0011  MAX,    9               / check natural numbers CURR to MAX; must be < 2048!
   43 00211 0015  CR,     13              / ASCII character values
   44 00212 0012  LF,     10
   45                     OCTAL
   46 00213 7600  OS8ENT, 7600            / OS/8 entry point
   47 00214 4207  OS8INS1,4207            / first instruction at that entry point
   48             
   49             



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 2


   50             EJECT
   51             //// MLCORE ////////////////////////////////////////////////////////////
   52             / The core of the main loop.  MAIN just inits the globals and calls us.
   53             
   54                     / Try dividing 3 into CURR first
   55 00215 7300  MLCORE, CLR             / redundant first time thru, but not later
   56 00216 1377          TAD (3)
   57 00217 4242          JMS ISMOD0
   58 00220 7450          SNA             / if ISMOD0 left AC = 0, CURR divided evenly by
   59 00221 5225          JMP NXITER      / 3, so skip 5 lest we count multiples of 15 2x
   60             
   61                     / That didn't work out, so try dividing 5 into it
   62 00222 7200          CLA
   63 00223 1376          TAD (5)
   64 00224 4242          JMS ISMOD0
   65             
   66                     / Loop cleanup
   67 00225 7200  NXITER, CLA             
   68 00226 1206          TAD CURR
   69 00227 7041          TCA
   70 00230 1210          TAD MAX         / = 0 if CURR == MAX
   71 00231 7450          SNA             / if so, leave calculation loop
   72 00232 5240          JMP MLDONE
   73 00233 7200          CLA
   74 00234 1206          TAD CURR        / CURR still < MAX, so increment CURR
   75 00235 7001          IAC
   76 00236 3206          DCA CURR
   77 00237 5215          JMP MLCORE
   78             
   79                     / Calculation complete.  Show answer and exit gracefully.
   80 00240 4255  MLDONE, JMS SHOWANS
   81 00241 5274          JMP ENDG
   82             
   83             



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 3


   84             EJECT
   85             //// ISMOD0 ////////////////////////////////////////////////////////////
   86             / If passed AC divides evenly into CURR (in C-speak, CURR % AC == 0)
   87             / add CURR to TOTAL and return 0 in AC.  Else, return nonzero in AC and
   88             / leave TOTAL untouched.
   89             
   90 00242 0000  ISMOD0, 0
   91                     / Divide CURR by DIVISOR, passed as AC
   92 00243 3246          DCA DIVISOR
   93 00244 1206          TAD CURR        / load CURR into just-cleared AC
   94 00245 7427          MQL DVI         / move CURR to MQ, divide by DIVISOR...
   95 00246 0000  DIVISOR,0               / ...quotient in MQ, remainder in AC
   96 00247 7440          SZA
   97 00250 5642          JMP I ISMOD0    / remainder nonzero, so leave early
   98             
   99                     / Division left AC empty, so CURR divides evenly by DIVISOR!
  100 00251 1206          TAD CURR        / don't need to clear AC; prior test says AC == 0
  101 00252 1207          TAD TOTAL
  102 00253 3207          DCA TOTAL
  103 00254 5642          JMP I ISMOD0
  104             
  105             
  106             //// SHOWANS ///////////////////////////////////////////////////////////
  107             / Write answer to terminal in decimal, with CRLF
  108             
  109 00255 0000  SHOWANS,0
  110 00256 7300          CLR
  111 00257 1207          TAD TOTAL
  112 00260 4305          JMS DECPRT      / print answer on console, in decimal
  113             
  114 00261 6041          TSF             / wait for terminal to be ready again
  115 00262 5261          JMP .-1
  116             
  117 00263 7200          CLA             / write CR to terminal
  118 00264 1211          TAD CR          
  119 00265 6046          TLS
  120             
  121 00266 6041          TSF             / wait again
  122 00267 5266          JMP .-1
  123             
  124 00270 7200          CLA             / then LF
  125 00271 1212          TAD LF
  126 00272 6046          TLS
  127             
  128 00273 5655          JMP I SHOWANS   / and done
  129             
  130             
  131             //// ENDG //////////////////////////////////////////////////////////////
  132             // End program gracefully, either re-entering OS/8 if we can see that
  133             // its entry point looks sane, or halting with the answer in AC so the



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 4


  134             // user can see the answer on the front panel.
  135             
  136 00274 7200  ENDG,   CLA
  137 00275 1213          TAD OS8ENT
  138 00276 7041          TCA
  139 00277 1214          TAD OS8INS1
  140 00300 7450          SNA
  141 00301 5775@         JMP 7600        / re-enter OS/8
  142 00302 7300          CLR
  143 00303 1207          TAD TOTAL
  144 00304 7402          HLT             / not running under OS/8, so halt
  145             
  146             



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 5


  147             EJECT
  148             //// DECPRT ////////////////////////////////////////////////////////////
  149             // Decimal number printer; see examples/routines/decprt.pal
  150             
  151 00305 0000  DECPRT, 0
  152 00306 3350          DCA VALUE       /SAVE INPUT
  153 00307 3351          DCA DIGIT       /CLEAR
  154 00310 1342          TAD CNTRZA
  155 00311 3352          DCA CNTRZB      /SET COUNTER TO FOUR
  156 00312 1341          TAD ADDRZA
  157 00313 3320          DCA ARROW       /SET TABLE POINTER
  158 00314 7410          SKP
  159 00315 3350          DCA VALUE       /SAVE
  160 00316 7100          CLL
  161 00317 1350          TAD VALUE
  162 00320 1343  ARROW,  TAD TENPWR      /SUBTRACT POWER OF TEN
  163 00321 7430          SZL
  164 00322 2351          ISZ DIGIT       /DEVELOP BCD DIGIT
  165 00323 7430          SZL
  166 00324 5315          JMP ARROW-3     /LOOP
  167 00325 7200          CLA             /HAVE BCD DIGIT
  168 00326 1351          TAD DIGIT       /GET DIGIT
  169 00327 1347          TAD K260        /MAKE IT ASCII
  170 00330 6041          TSF             /OR TAD DIGIT
  171 00331 5330          JMP .-1         /JMS TDIGIT(SEE 8-19-U)
  172 00332 6046          TLS             /TYPE DIGIT
  173 00333 7200          CLA
  174 00334 3351          DCA DIGIT       /CLEAR
  175 00335 2320          ISZ ARROW       /UPDATE POINTER
  176 00336 2352          ISZ CNTRZB      /DONE ALL FOUR?
  177 00337 5317          JMP ARROW-1     /NO: CONTINUE
  178 00340 5705          JMP I DECPRT    /YES: EXIT
  179 00341 1343  ADDRZA, TAD TENPWR
  180 00342 7774  CNTRZA, -4
  181 00343 6030  TENPWR, -1750           /ONE THOUSAND
  182 00344 7634          -0144           /ONE HUNDRED
  183 00345 7766          -0012           /TEN
  184 00346 7777          -0001           /ONE
  185 00347 0260  K260,   260
  186 00350 0000  VALUE,  0
  187 00351 0000  DIGIT,  0
  188 00352 0000  CNTRZB, 0
  189             
  190             
  191             //// END ///////////////////////////////////////////////////////////////
  192             / Assembler-generated constants will appear below this in the list file
      00375 7600
      00376 0005
      00377 0003
  193             $

      No detected errors
