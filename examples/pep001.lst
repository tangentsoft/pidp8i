


      / Project Euler Problem #1: Multiples of 3 and 5                    Page 1


    1             / Project Euler Problem #1: Multiples of 3 and 5
    2             /
    3             / ----------------------------------------------------------------------
    4             / If we list all the natural numbers below 10 that are multiples of
    5             / 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    6             /
    7             / Find the sum of all the multiples of 3 or 5 below 1000.
    8             / ----------------------------------------------------------------------
    9             / 
   10             / Solution by Warren Young of tangentsoft.com, 2016.11.29
   11             ////////////////////////////////////////////////////////////////////////
   12             
   13             
   14             ////////////////////////////////////////////////////////////////////////
   15             / DIY ASSEMBLER INSTRUCTIONS
   16             
   17             / Our assembler doesn't know the EAE instructions, so teach it
   18       7407  DVI=7407                / integer divide .+1 into {AC:MQ}, answer in MQ
   19       7405  MUY=7405                / integer multiply MQ by .+1, answer in {AC:MQ}
   20             
   21             / Combined microcoded instruction aliases
   22       7300  CLR=CLA CLL             / clear both AC and L
   23       7701  MCM=CLA MQA             / move MQ to AC
   24       7041  TCA=CMA IAC             / two's complement the accumulator
   25       7521  XMA=MQA MQL             / exchange MQ and AC
   26       7201  AC1=CLA IAC             / set AC to 1
   27             
   28             



      / Project Euler Problem #1: Multiples of 3 and 5                    Page 2


   29             EJECT
   30             //// MAIN //////////////////////////////////////////////////////////////
   31             
   32             PAGE 1
   33             
   34                     / Try dividing 3 into CURR first
   35 00200 7200  NEXT,   CLA
   36 00201 1377          TAD (3)
   37 00202 4232          JMS ISMOD0
   38 00203 7450          SNA             / if ISMOD0 left AC = 0, CURR divided evenly by
   39 00204 5210          JMP SKIP5       / 3, so skip 5 lest we count multiples of 15 2x
   40             
   41                     / That didn't work out, so try dividing 5 into it
   42 00205 7200          CLA
   43 00206 1376          TAD (5)
   44 00207 4232          JMS ISMOD0
   45             
   46                     / increment CURR
   47 00210 7200  SKIP5,  CLA             
   48 00211 1227          TAD CURR
   49 00212 7001          IAC
   50 00213 3227          DCA CURR
   51             
   52                     / iterate unless CURR == MAX
   53 00214 1227          TAD CURR
   54 00215 7041          TCA
   55 00216 1226          TAD MAX
   56 00217 7440          SZA
   57 00220 5200          JMP NEXT
   58             
   59                     / Finished main loop. Write answer to terminal in octal.
   60 00221 7200  DONE,   CLA
   61 00222 1231          TAD TOTAL
   62 00223 7402          HLT             / wait for user to verify answer in binary
   63 00224 4255          JMS DECPRT      / print on console in decimal (ASCII)
   64 00225 5775@         JMP 7600        / re-enter OS/8
   65             
   66             / Constants
   67                     DECIMAL
   68 00226 0011  MAX,    9               / check natural numbers CURR to MAX; must be < 4096!
   69                     OCTAL
   70             
   71             / Variables
   72 00227 0003  CURR,   3               / current number we're checking; skip 1 & 2
   73 00230 0000  QUOTNT, 0               / quotient calculated in division step
   74 00231 0000  TOTAL,  0               / the answer, in binary form; see also ANSBUF
   75             
   76             
   77             



      / Project Euler Problem #1: Multiples of 3 and 5                    Page 3


   78             EJECT
   79             //// ISMOD0 ////////////////////////////////////////////////////////////
   80             / If passed AC divides evenly into CURR (in C-speak, CURR % AC == 0)
   81             / add CURR to TOTAL and return 0 in AC.  Else, return nonzero in AC and
   82             / leave TOTAL untouched.
   83             
   84 00232 0000  ISMOD0, 0
   85                     / Move AC to operand word after DVI instruction that uses it
   86 00233 3237          DCA DIVISOR
   87             
   88                     / Divide CURR by it
   89 00234 1227          TAD CURR        / load CURR into just-cleared AC
   90 00235 7421          MQL             / move it to MQ, clearing AC
   91 00236 7407          DVI             / divide DIVISOR into {AC:MQ}, quotient into MQ
   92 00237 0000  DIVISOR,0               / copy of divisor which ISMOD0 got as AC
   93             
   94                     / Now multiply it back out
   95 00240 1237          TAD DIVISOR     / AC should still be zero here
   96 00241 3243          DCA MCAND       / save copy of DIVISOR as multiplicand
   97 00242 7405          MUY             / which we multiply by MQ, still holding quotient
   98 00243 0000  MCAND,  0
   99             
  100                     / Moment of truth: did that pair of operations yield CURR?
  101 00244 7701          MCM             / could do MQA because AC must be 0 with CURR <
  102                                     / 2^12, but it costs nothing to be safe here
  103 00245 7041          TCA             / flip AC's sign
  104 00246 1227          TAD CURR        / and add to CURR, subtracting product from it
  105 00247 7440          SZA             / skip early return if AC is 0
  106 00250 5632          JMP I ISMOD0
  107 00251 1227          TAD CURR        / AC is 0, so we can load CURR directly
  108 00252 1231          TAD TOTAL
  109 00253 3231          DCA TOTAL
  110 00254 5632          JMP I ISMOD0
  111             
  112             



      / Project Euler Problem #1: Multiples of 3 and 5                    Page 4


  113             EJECT
  114             //// DECPRT ////////////////////////////////////////////////////////////
  115             // Decimal number printer; see examples/routines/decprt.pal
  116             
  117 00255 0000  DECPRT, 0
  118 00256 3320          DCA VALUE       /SAVE INPUT
  119 00257 3321          DCA DIGIT       /CLEAR
  120 00260 1312          TAD CNTRZA
  121 00261 3322          DCA CNTRZB      /SET COUNTER TO FOUR
  122 00262 1311          TAD ADDRZA
  123 00263 3270          DCA ARROW       /SET TABLE POINTER
  124 00264 7410          SKP
  125 00265 3320          DCA VALUE       /SAVE
  126 00266 7100          CLL
  127 00267 1320          TAD VALUE
  128 00270 1313  ARROW,  TAD TENPWR      /SUBTRACT POWER OF TEN
  129 00271 7430          SZL
  130 00272 2321          ISZ DIGIT       /DEVELOP BCD DIGIT
  131 00273 7430          SZL
  132 00274 5265          JMP ARROW-3     /LOOP
  133 00275 7200          CLA             /HAVE BCD DIGIT
  134 00276 1321          TAD DIGIT       /GET DIGIT
  135 00277 1317          TAD K260        /MAKE IT ASCII
  136 00300 6041          TSF             /OR TAD DIGIT
  137 00301 5300          JMP .-1         /JMS TDIGIT(SEE 8-19-U)
  138 00302 6046          TLS             /TYPE DIGIT
  139 00303 7200          CLA
  140 00304 3321          DCA DIGIT       /CLEAR
  141 00305 2270          ISZ ARROW       /UPDATE POINTER
  142 00306 2322          ISZ CNTRZB      /DONE ALL FOUR?
  143 00307 5267          JMP ARROW-1     /NO: CONTINUE
  144 00310 5655          JMP I DECPRT    /YES: EXIT
  145 00311 1313  ADDRZA, TAD TENPWR
  146 00312 7774  CNTRZA, -4
  147 00313 6030  TENPWR, -1750           /ONE THOUSAND
  148 00314 7634          -0144           /ONE HUNDRED
  149 00315 7766          -0012           /TEN
  150 00316 7777          -0001           /ONE
  151 00317 0260  K260,   260
  152 00320 0000  VALUE,  0
  153 00321 0000  DIGIT,  0
  154 00322 0000  CNTRZB, 0
  155             
  156             
  157             //// END ///////////////////////////////////////////////////////////////
      00375 7600
      00376 0005
      00377 0003
  158             $

      No detected errors
