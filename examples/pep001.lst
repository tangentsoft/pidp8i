


      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 1


    1             / Project Euler Problem #1, Multiples of 3 and 5:
    2             /
    3             /   If we list all the natural numbers below 10 that are multiples of
    4             /   3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    5             /   Find the sum of all the multiples of 3 or 5 below 1000.
    6             / 
    7             / Solution by Warren Young of tangentsoft.com, 2016.11.29
    8             ////////////////////////////////////////////////////////////////////////
    9             
   10             
   11             ////////////////////////////////////////////////////////////////////////
   12             / DIY ASSEMBLER INSTRUCTIONS
   13             
   14             / Our assembler doesn't know the EAE instructions, so teach it
   15       7407  DVI=7407                / integer divide .+1 into {AC:MQ}, answer in MQ
   16       7405  MUY=7405                / integer multiply MQ by .+1, answer in {AC:MQ}
   17             
   18             / Combined microcoded instruction aliases
   19       7300  CLR=CLA CLL             / clear both AC and L
   20       7701  MCM=CLA MQA             / move MQ to AC
   21       7041  TCA=CMA IAC             / two's complement the accumulator
   22       7521  XMA=MQA MQL             / exchange MQ and AC
   23       7201  AC1=CLA IAC             / set AC to 1
   24             
   25             
   26             //// MAIN //////////////////////////////////////////////////////////////
   27             / Program entry point.   We purposely reinitialize global variables and
   28             / processor state in case we're restarting this program in-core.
   29             
   30             PAGE 1
   31 00200 7300  MAIN,   CLR
   32 00201 1377          TAD (3)
   33 00202 3205          DCA CURR        / start with 3, because we know 1 & 2 can't work
   34 00203 3206          DCA TOTAL       / reset total to 0
   35 00204 5210          JMP MLCORE
   36 00205 0000  CURR,   0               / current number we're checking
   37 00206 0000  TOTAL,  0               / the answer so far; at the end, printed out
   38             
   39             / Constants
   40                     DECIMAL
   41 00207 0011  MAX,    9               / check natural numbers CURR to MAX; must be < 2048!
   42                     OCTAL
   43             
   44             



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 2


   45             EJECT
   46             //// MLCORE ////////////////////////////////////////////////////////////
   47             / The core of the main loop.  MAIN just inits the globals and calls us.
   48             
   49                     / Try dividing 3 into CURR first
   50 00210 7300  MLCORE, CLR             / redundant first time thru, but not later
   51 00211 1377          TAD (3)
   52 00212 4237          JMS ISMOD0
   53 00213 7450          SNA             / if ISMOD0 left AC = 0, CURR divided evenly by
   54 00214 5220          JMP NXITER      / 3, so skip 5 lest we count multiples of 15 2x
   55             
   56                     / That didn't work out, so try dividing 5 into it
   57 00215 7200          CLA
   58 00216 1376          TAD (5)
   59 00217 4237          JMS ISMOD0
   60             
   61                     / Loop cleanup
   62 00220 7200  NXITER, CLA             
   63 00221 1205          TAD CURR
   64 00222 7041          TCA
   65 00223 1207          TAD MAX         / = 0 if CURR == MAX
   66 00224 7450          SNA             / if so, leave calculation loop
   67 00225 5233          JMP MLDONE
   68 00226 7200          CLA
   69 00227 1205          TAD CURR        / CURR still < MAX, so increment CURR
   70 00230 7001          IAC
   71 00231 3205          DCA CURR
   72 00232 5210          JMP MLCORE
   73             
   74                     / Finished. Write answer to terminal in octal.
   75 00233 7300  MLDONE, CLR
   76 00234 1206          TAD TOTAL
   77 00235 4252          JMS DECPRT      / print on console in decimal (ASCII)
   78 00236 5775@         JMP 7600        / re-enter OS/8
   79             
   80             
   81             



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 3


   82             EJECT
   83             //// ISMOD0 ////////////////////////////////////////////////////////////
   84             / If passed AC divides evenly into CURR (in C-speak, CURR % AC == 0)
   85             / add CURR to TOTAL and return 0 in AC.  Else, return nonzero in AC and
   86             / leave TOTAL untouched.
   87             
   88 00237 0000  ISMOD0, 0
   89                     / Divide CURR by DIVISOR, passed as AC
   90 00240 3243          DCA DIVISOR
   91 00241 1205          TAD CURR        / load CURR into just-cleared AC
   92 00242 7427          MQL DVI         / move CURR to MQ, divide by DIVISOR...
   93 00243 0000  DIVISOR,0               / ...quotient in MQ, remainder in AC
   94 00244 7440          SZA
   95 00245 5637          JMP I ISMOD0    / remainder nonzero, so leave early
   96             
   97                     / Division left AC empty, so CURR divides evenly by DIVISOR!
   98 00246 1205          TAD CURR        / don't need to clear AC; prior test says AC == 0
   99 00247 1206          TAD TOTAL
  100 00250 3206          DCA TOTAL
  101 00251 5637          JMP I ISMOD0
  102             
  103             



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 4


  104             EJECT
  105             //// DECPRT ////////////////////////////////////////////////////////////
  106             // Decimal number printer; see examples/routines/decprt.pal
  107             
  108 00252 0000  DECPRT, 0
  109 00253 3315          DCA VALUE       /SAVE INPUT
  110 00254 3316          DCA DIGIT       /CLEAR
  111 00255 1307          TAD CNTRZA
  112 00256 3317          DCA CNTRZB      /SET COUNTER TO FOUR
  113 00257 1306          TAD ADDRZA
  114 00260 3265          DCA ARROW       /SET TABLE POINTER
  115 00261 7410          SKP
  116 00262 3315          DCA VALUE       /SAVE
  117 00263 7100          CLL
  118 00264 1315          TAD VALUE
  119 00265 1310  ARROW,  TAD TENPWR      /SUBTRACT POWER OF TEN
  120 00266 7430          SZL
  121 00267 2316          ISZ DIGIT       /DEVELOP BCD DIGIT
  122 00270 7430          SZL
  123 00271 5262          JMP ARROW-3     /LOOP
  124 00272 7200          CLA             /HAVE BCD DIGIT
  125 00273 1316          TAD DIGIT       /GET DIGIT
  126 00274 1314          TAD K260        /MAKE IT ASCII
  127 00275 6041          TSF             /OR TAD DIGIT
  128 00276 5275          JMP .-1         /JMS TDIGIT(SEE 8-19-U)
  129 00277 6046          TLS             /TYPE DIGIT
  130 00300 7200          CLA
  131 00301 3316          DCA DIGIT       /CLEAR
  132 00302 2265          ISZ ARROW       /UPDATE POINTER
  133 00303 2317          ISZ CNTRZB      /DONE ALL FOUR?
  134 00304 5264          JMP ARROW-1     /NO: CONTINUE
  135 00305 5652          JMP I DECPRT    /YES: EXIT
  136 00306 1310  ADDRZA, TAD TENPWR
  137 00307 7774  CNTRZA, -4
  138 00310 6030  TENPWR, -1750           /ONE THOUSAND
  139 00311 7634          -0144           /ONE HUNDRED
  140 00312 7766          -0012           /TEN
  141 00313 7777          -0001           /ONE
  142 00314 0260  K260,   260
  143 00315 0000  VALUE,  0
  144 00316 0000  DIGIT,  0
  145 00317 0000  CNTRZB, 0
  146             
  147             
  148             //// END ///////////////////////////////////////////////////////////////
  149             / Assembler-generated constants will appear below this in the list file
      00375 7600
      00376 0005
      00377 0003
  150             $

      No detected errors
