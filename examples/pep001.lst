


      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 1


    1             / Project Euler Problem #1, Multiples of 3 and 5:
    2             /
    3             /   If we list all the natural numbers below 10 that are multiples of
    4             /   3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    5             /   Find the sum of all the multiples of 3 or 5 below 1000.
    6             / 
    7             / Solution by Warren Young of tangentsoft.com, 2016.11.29
    8             ////////////////////////////////////////////////////////////////////////
    9             
   10             
   11             ////////////////////////////////////////////////////////////////////////
   12             / DIY ASSEMBLER INSTRUCTIONS
   13             
   14             / Our assembler doesn't know the EAE instructions, so teach it
   15       7407  DVI=7407                / integer divide .+1 into {AC:MQ}, answer in MQ
   16       7405  MUY=7405                / integer multiply MQ by .+1, answer in {AC:MQ}
   17             
   18             / Combined microcoded instruction aliases
   19       7300  CLR=CLA CLL             / clear both AC and L
   20       7701  MCM=CLA MQA             / move MQ to AC
   21       7041  TCA=CMA IAC             / two's complement the accumulator
   22       7521  XMA=MQA MQL             / exchange MQ and AC
   23       7201  AC1=CLA IAC             / set AC to 1
   24             
   25             
   26             //// MAIN //////////////////////////////////////////////////////////////
   27             / Program entry point.   We purposely reinitialize global variables and
   28             / processor state in case we're restarting this program in-core.
   29             
   30             PAGE 1
   31 00200 7300  MAIN,   CLR
   32 00201 1377          TAD (3)
   33 00202 3205          DCA CURR        / start with 3, because we know 1 & 2 can't work
   34 00203 3206          DCA TOTAL       / reset total to 0
   35 00204 5210          JMP NEXT
   36 00205 0000  CURR,   0               / current number we're checking
   37 00206 0000  TOTAL,  0               / the answer so far; at the end, printed out
   38             
   39             / Constants
   40                     DECIMAL
   41 00207 0011  MAX,    9               / check natural numbers CURR to MAX; must be < 2048!
   42                     OCTAL
   43             
   44             



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 2


   45             EJECT
   46             //// NEXT //////////////////////////////////////////////////////////////
   47             / The core of the main loop.  MAIN just inits the globals and calls us.
   48             
   49                     / Try dividing 3 into CURR first
   50 00210 7300  NEXT,   CLR             / redundant first time thru, but not later
   51 00211 1206          TAD TOTAL
   52 00212 4264          JMS DECPRT
   53 00213 7300          CLR
   54 00214 1377          TAD (3)
   55 00215 4241          JMS ISMOD0
   56 00216 7450          SNA             / if ISMOD0 left AC = 0, CURR divided evenly by
   57 00217 5223          JMP SKIP5       / 3, so skip 5 lest we count multiples of 15 2x
   58             
   59                     / That didn't work out, so try dividing 5 into it
   60 00220 7200          CLA
   61 00221 1376          TAD (5)
   62 00222 4241          JMS ISMOD0
   63             
   64                     / increment CURR
   65 00223 7200  SKIP5,  CLA             
   66 00224 1205          TAD CURR
   67 00225 7001          IAC
   68 00226 3205          DCA CURR
   69             
   70                     / iterate unless CURR == MAX
   71 00227 1205          TAD CURR
   72 00230 7041          TCA
   73 00231 1207          TAD MAX
   74 00232 7440          SZA
   75 00233 5210          JMP NEXT
   76             
   77                     / Finished. Write answer to terminal in octal.
   78 00234 7200  DONE,   CLA
   79 00235 1206          TAD TOTAL
   80 00236 7402          HLT             / wait for user to verify answer in binary
   81 00237 4264          JMS DECPRT      / print on console in decimal (ASCII)
   82 00240 5775@         JMP 7600        / re-enter OS/8
   83             
   84             
   85             



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 3


   86             EJECT
   87             //// ISMOD0 ////////////////////////////////////////////////////////////
   88             / If passed AC divides evenly into CURR (in C-speak, CURR % AC == 0)
   89             / add CURR to TOTAL and return 0 in AC.  Else, return nonzero in AC and
   90             / leave TOTAL untouched.
   91             
   92 00241 0000  ISMOD0, 0
   93                     / Move AC to operand word after DVI instruction that uses it
   94 00242 3246          DCA DIVISOR
   95             
   96                     / Divide CURR by it
   97 00243 1205          TAD CURR        / load CURR into just-cleared AC
   98 00244 7421          MQL             / move it to MQ, clearing AC
   99 00245 7407          DVI             / divide DIVISOR into {AC:MQ}, quotient into MQ
  100 00246 0000  DIVISOR,0               / copy of divisor which ISMOD0 got as AC
  101             
  102                     / Now multiply it back out
  103 00247 1246          TAD DIVISOR     / AC should still be zero here
  104 00250 3252          DCA MCAND       / save copy of DIVISOR as multiplicand
  105 00251 7405          MUY             / which we multiply by MQ, still holding quotient
  106 00252 0000  MCAND,  0
  107             
  108                     / Moment of truth: did that pair of operations yield CURR?
  109 00253 7701          MCM             / could do MQA because AC must be 0 with CURR <
  110                                     / 2^12, but it costs nothing to be safe here
  111 00254 7041          TCA             / flip AC's sign
  112 00255 1205          TAD CURR        / and add to CURR, subtracting product from it
  113 00256 7440          SZA             / if AC != 0, product != CURR, so leave early
  114 00257 5641          JMP I ISMOD0
  115 00260 1205          TAD CURR        / AC is 0, so we can load CURR directly
  116 00261 1206          TAD TOTAL
  117 00262 3206          DCA TOTAL
  118 00263 5641          JMP I ISMOD0
  119             
  120             



      / Project Euler Problem #1, Multiples of 3 and 5:                   Page 4


  121             EJECT
  122             //// DECPRT ////////////////////////////////////////////////////////////
  123             // Decimal number printer; see examples/routines/decprt.pal
  124             
  125 00264 0000  DECPRT, 0
  126 00265 3327          DCA VALUE       /SAVE INPUT
  127 00266 3330          DCA DIGIT       /CLEAR
  128 00267 1321          TAD CNTRZA
  129 00270 3331          DCA CNTRZB      /SET COUNTER TO FOUR
  130 00271 1320          TAD ADDRZA
  131 00272 3277          DCA ARROW       /SET TABLE POINTER
  132 00273 7410          SKP
  133 00274 3327          DCA VALUE       /SAVE
  134 00275 7100          CLL
  135 00276 1327          TAD VALUE
  136 00277 1322  ARROW,  TAD TENPWR      /SUBTRACT POWER OF TEN
  137 00300 7430          SZL
  138 00301 2330          ISZ DIGIT       /DEVELOP BCD DIGIT
  139 00302 7430          SZL
  140 00303 5274          JMP ARROW-3     /LOOP
  141 00304 7200          CLA             /HAVE BCD DIGIT
  142 00305 1330          TAD DIGIT       /GET DIGIT
  143 00306 1326          TAD K260        /MAKE IT ASCII
  144 00307 6041          TSF             /OR TAD DIGIT
  145 00310 5307          JMP .-1         /JMS TDIGIT(SEE 8-19-U)
  146 00311 6046          TLS             /TYPE DIGIT
  147 00312 7200          CLA
  148 00313 3330          DCA DIGIT       /CLEAR
  149 00314 2277          ISZ ARROW       /UPDATE POINTER
  150 00315 2331          ISZ CNTRZB      /DONE ALL FOUR?
  151 00316 5276          JMP ARROW-1     /NO: CONTINUE
  152 00317 5664          JMP I DECPRT    /YES: EXIT
  153 00320 1322  ADDRZA, TAD TENPWR
  154 00321 7774  CNTRZA, -4
  155 00322 6030  TENPWR, -1750           /ONE THOUSAND
  156 00323 7634          -0144           /ONE HUNDRED
  157 00324 7766          -0012           /TEN
  158 00325 7777          -0001           /ONE
  159 00326 0260  K260,   260
  160 00327 0000  VALUE,  0
  161 00330 0000  DIGIT,  0
  162 00331 0000  CNTRZB, 0
  163             
  164             
  165             //// END ///////////////////////////////////////////////////////////////
  166             / Assembler-generated constants will appear below this in the list file
      00375 7600
      00376 0005
      00377 0003
  167             $

      No detected errors
