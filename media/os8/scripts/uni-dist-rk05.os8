# Creates an OS/8 Combined Kit binary rk05 image from compiled
# Object rk05 images.
# Based on v3d-dist-rk05.os8, and the v3f stuff in all-tu56.os8

# I'm not sure if we can build an RK05 system from scratch
# when booted from RK05, so we'll bootstrap using the OS/8
# distribution DECtape
mount dt0 $os8mi/al-4711c-ba-os8-v3d-1.1978.tu56 required scratch

# rk0 holds the media we build
mount rk0 $os8mo/uni-dist.rk05 new
# rk1  holds the system object image.
mount rk1 $os8mo/uni-sys-obj.rk05
# rk2 holds the CUSPS object image
mount rk2 $os8mo/uni-cusps-obj.rk05

boot dt0

# Our built image inherits whether or not INIT is set.
# A blank tape will complain "NO CCL!" on first boot.
# So first thing SET SYS NO INIT

os8 SET SYS NO INIT

print BUILD the system head
# BUILD requires our OS8.BN and CD.BN to be on DSK:
os8 COPY DSK:<RKB1:OS8.BN,CD.BN

begin build RKB1:BUILD
# But our build has no handlers
LOAD RKB1:RK8ESY.BN
LOAD RKB1:RK8ENS.BN
LOAD RKB1:RXNS.BN
LOAD RKB1:KL8E.BN
LOAD RKB1:LPSV.BN
LOAD RKB1:TC08SY.BN
LOAD RKB1:TC08NS.BN
LOAD RKB1:PT8E.BN
LOAD RKB1:TD8ESY.BN
LOAD RKB1:ROMMSY.BN
LOAD RKB1:TD8EA.BN
# We could load more TD8E non-system drivers
# But there is limited space, so we elect not to.
# LOAD RKB1:TD8EB.BN
# LOAD RKB1:TD8EC.BN
# LOAD RKB1:TD8ED.BN
SYSTEM RK8E
INSERT KL8E,TTY
INSERT LPSV,LPT
INSERT PT8E,PTR
INSERT PT8E,PTP
INSERT RK8E,RKA0,RKB0
INSERT RK05,RKA1,RKB1
INSERT RK05,RKA2,RKB2
INSERT TC,DTA0,DTA1
DSK RK8E:RKB0
PRINT
BUILD DSK:OS8.BN DSK:CD.BN
BOOT
end build

os8 SAVE SYS BUILD.SV
# There is stuff we have to do to get a batch-literate BUILD here.

print copying in CUSPS.

# Judgment call:
# Leaving out MCPIP.SV, PIP10.SV, CAMP.SV, RKLFMT.SV
# Tape Specific: DTCOPY.SV, DTFRMT.SV, TDCOPY.SV, TDFRMT.SV
# Never used: RKLFMT.SV

begin cdprog RKB2:FOTP.SV
RKA0:<RKB1:CCL.SV
RKA0:<RKB1:RESORC.SV
RKA0:<RKB1:BATCH.SV
RKA0:<RKB2:FOTP.SV
RKA0:<RKB2:DIRECT.SV
RKA0:<RKB2:BOOT.SV
RKA0:<RKB2:EDIT.SV
RKA0:<RKB2:EPIC.SV
RKA0:<RKB2:PIP.SV
RKA0:<RKB2:SET.SV
RKA0:<RKB2:FUTIL.SV
RKA0:<RKB2:PAL8.SV
RKA0:<RKB2:BITMAP.SV
RKA0:<RKB2:CREF.SV
RKA0:<RKB2:SRCCOM.SV
RKA0:<RKB2:HELP.SV
RKA0:<RKB2:RXCOPY.SV
RKA0:<RKA1:HELP.HL
RKA0:<RKB2:TECO.SV
RKA0:<RKA1:??SYS.BI
end cdprog RKB2:FOTP.SV

os8 R CCL

# Initialize RKB0:
os8 ZERO DSK:

os8 SET TTY COL 3
begin default crt
  os8 SET TTY SCOPE
end default crt

umount rk1
umount rk2
# rk1  holds the BASIC/FORTRAN II object image.
mount rk1 $os8mo/uni-bf2-obj.rk05

# We install SABR and LOADER even if F2 disabled because
# we use them for the C compiler.
print copying in BASIC and SABR and LOADER
begin cdprog SYS:FOTP.SV
RKA0:<RKB1:BLOAD.SV
RKA0:<RKB1:BRTS.SV
RKA0:<RKB1:BCOMP.SV
RKA0:<RKB1:BASIC.*
RKA0:<RKB1:SABR.SV
RKA0:<RKB1:LOADER.SV
# Copy in the BASIC UF.PA source. Maybe make it later
# Note it's starting address on the v3d dist is 7605.
RKB0:<RKA1:UF.PA
end cdprog SYS:FOTP.SV

print Bringing in optional packages build from Combined Kit source

begin default fortran-ii
begin cdprog SYS:FOTP.SV
RKA0:<RKB1:FORT.SV
RKA0:<RKB1:LIBSET.SV
RKA0:<RKB1:*.RL
end cdprog SYS:FOTP.SV
end default fortran-ii

# We're done with BASIC and FORTRAN II object rk05.

# Copying in Music score files and source code...
begin enabled music
print Music score files and source code
mount dt1 $os8mi/subsys/music.tu56 ro required
os8 COPY RKB0:<DTA1:*.*
umount dt1
end enabled music

# Adventure
begin default advent
mount dt1 $os8mi/subsys/advent.tu56 ro required
os8 COPY RKB0:<DTA1:*.*
umount dt1
end default advent

# BASIC games and demos
begin default ba
mount dt1 $os8mi/subsys/ba.tu56 ro required
os8 COPY RKB0:<DTA1:*.*
umount dt1
end default ba

# Kermit-12
begin default k12
mount dt1 $os8mi/subsys/k12.tu56 ro required
os8 COPY RKA0:<DTA1:*.*
umount dt1
end default k12

# FORTRAN IV
begin default fortran-iv
# rk1 holds the FORTRAN IV object image
mount rk1 $os8mo/uni-fiv-obj.rk05
os8 COPY RKA0:<RKB1:*.*
umount rk1
end default fortran-iv

# MACREL V2
# In future we will build this from source
begin default macrel
mount dt1 $os8mi/al-5642c-ba-macrel-v2-futil-v8b-by-hand.tu56 ro required
os8 COPY RKA0:<DTA1:MACREL.SV,LINK.SV,KREF.SV,OVRDRV.MA
umount dt1
end default macrel

# Files from local.tu56
mount dt1 $os8mi/local.tu56 ro required

begin default chess
os8 COPY RKA0:<DTA1:CHESS.*
end default chess

# TECO VTEDIT setup
begin enabled vtedit
os8 COPY RKA0:<DTA1:VTEDIT.*
os8 COPY RKA0:<DTA1:TECO.IN
end enabled vtedit

# DCP Disassembler: DCP24.SV, and DCP16.SV as DCP.SV
begin default dcp
os8 COPY RKA0:<DTA1:DCP24.SV,DCP.SV,DCP16.SV
end default dcp
umount dt1

# FOCAL69 .BN files installed on DSK:
begin enabled focal69
mount dt1 $os8mi/subsys/focal69.tu56 ro required
os8 COPY RKB0:<DTA1:FOCAL.BN,4WORD.BN,4KVT.BN,8KVT.BN,8KNOVT.BN
umount dt1
end enabled focal69

# U/W FOCAL
begin default uwfocal
mount dt1 $os8mi/subsys/uwfocal-v4e-2.tu56 ro required
os8 COPY RKA0:<DTA1:UWF16K.SV
umount dt1
end default uwfocal

# Further system initialization

begin default lcmod
os8 SUBMIT SYS:LCSYS.BI
# os8 SUBMIT SYS:LCBAS.BI
end default lcmod

# INIT message setting stuff goes here
# Implement the config option to enable/disable INIT
# By default we enable it.
# We may be building from distribution media with INIT enabled.
# So always SET SYS NO INIT
# and undo it by default, to be overridden if --disable-os8-init is set.
# Only copy init.cm and init.tx if init is enabled.

os8 SET SYS NO INIT
begin default init
cpto $os8mi/init.cm
# Location of init.tx is funky so that test-os8-run will be able to
# sanitize it.
cpto $build/media/os8/uni-init.tx DSK:INIT.TX
os8 SET SYS INIT
end default init

# Squish of SYS and DSK goes here
os8 SQUISH DSK:/O
os8 SQUISH SYS:/O

