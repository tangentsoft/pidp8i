#!/bin/bash
########################################################################
# pidp8i.in - Collection of scriptlets for dealing with the pidp8i
#   systemd user service and its associated screen(1) session.
#
# Copyright Â© 2015-2018 Oscar Vermeulen and Warren Young
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS LISTED ABOVE BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
# OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the names of the authors above
# shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written
# authorization from those authors.
########################################################################

bootdir="@BOOTDIR@"
prefix="@ABSPREFIX@"
sim="$prefix/bin/pidp8i-sim"
scanswitch="$prefix/libexec/scanswitch"

is_running() {
    procs=`screen -list pidp8i | grep -Pc '\d\.pidp8i'`
    test $procs -gt 0 && return 0 || return 1
}

# Were we given a command line argument?
if [ -z "$1" ]
then
    # No, so just try to attach to the running simulator
    if is_running
    then
        echo Joining simulator session already in progress...
        screen -r -S pidp8i
    else
        cat <<ERROR
Either the simulator isn't running, or it isn't running under a screen(1)
session owned by @INSTUSR@.  Did you start the simulator via systemd?

ERROR
		exit 1
    fi
fi

# Take first parameter as a command verb.  Lowercase it in case we're
# connected to an all-caps terminal; it's a common wish to attach a real
# ASR-33 to a PiDP-8/I, for example.
verb="$(echo $1 | awk '{print tolower($0)}')"
shift

if [ "$verb" = "install" ]
then
    # "sudo make install" is running us with root perms dropped.  We do
    # a bunch of things for it that would be awkward to do from within
    # the Makefile, which must be done as @INSTUSR@.
    set -e
    cd @abs_top_builddir@
    export XDG_RUNTIME_DIR=/run/user/$(id -u)
    unitdir=~@INSTUSR@/.local/share/systemd/user
    @INSTALL@ -d $unitdir
    @INSTALL@ -m 644 @srcdir@/etc/pidp8i.service $unitdir
    systemctl --user daemon-reload
    /bin/systemctl --user enable pidp8i
elif test -t 1
then
    # We were given some other arg(s) and we're attached to a terminal,
    # so build a systemctl command with those args so the user doesn't
    # have to type out the canonical form of the command.
    systemctl --user $verb "$@" pidp8i
    exit $?
elif [ "$verb" = "start" ]
then
    # systemd is telling us to start the background simulator
    if is_running
    then
        echo "PiDP-8/I is already running, not starting again." >&2
        exit 0
    fi

    # User is asking us to start the PiDP-8/I simulator. First step:
    # check for special front panel switch combos which control us.
    $scanswitch >/dev/null 2>&1
    rv=$?
    if [ $rv -eq 8 ]; then
        echo "PiDP-8/I STOP switch detected, aborting." >&2
        exit 0
    elif [ $rv -lt 8 ]; then
        bscript="$bootdir/""$rv"".script"
        echo "Booting from $bscript..."
    elif [ $rv -eq 127 ]; then
        echo "PiDP-8/I panel not present.  Booting 0.script with pure SIMH..."
        sim="$prefix/bin/pdp8"
        bscript="$bootdir/0.script"
    else
        echo "Bad return value $rv from $scanswitch!"
        exit 1
    fi

    # We want SIMH to have a sensible working directory: somewhere the
    # user can write files and which makes sense when giving SIMH
    # commands involving file paths.  This default is chosen because it
    # satisfies both criteria, plus it makes tools/mkos8 happy.
    # If you change the default here, change that script as well.
    cd "$prefix/share/media"
    screen -dm -S pidp8i "$sim" "$bscript"
    exit $?
elif [ "$verb" = "stop" ]
then
    # Someone (maybe systemd) is telling us to stop the background
    # simulator.  Try stopping the simulator itself, gracefully at
    # first, then increasingly forcefully if it doesn't die quickly.
    echo -n "Stopping simulator..."
    pkill -INT pidp8i-sim
    for i in $(seq 20)
    do
        if pkill -0 pidp8i-sim
        then
            # It's still up, so give it a bit more time.
            sleep "0.1s"
            echo -n "."
        else
            break
        fi
    done

    # If it didn't take our first hint, start getting stern.
    if [ $(pgrep -c pidp8i-sim) -gt 0 ]
    then
        echo -n "  Trying harder..."

        for i in $(seq 8)
        do
            if [ $(pgrep -c pidp8i-sim) -gt 0 ]
            then
                pkill -INT pidp8i-sim
                sleep "0.25s"
                echo -n "."
            else
                break
            fi
        done
        killall -KILL pidp8i-sim
    fi
    echo

    # Now stop the screen(1) session if it's still alive, despite its
    # only child dying.
    if is_running ; then screen -S pidp8i -X quit ; fi
fi
